
Project_3c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006690  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006830  08006830  00016830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae0  08006ae0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001dc  08006cc4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08006cc4  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3a8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001deb  00000000  00000000  0002d5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  000300e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f33  00000000  00000000  00030d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e17  00000000  00000000  00047c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091279  00000000  00000000  00051a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2cfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000e2d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006818 	.word	0x08006818

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006818 	.word	0x08006818

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fc90 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f81a 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f98a 	bl	800127c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f68:	f000 f968 	bl	800123c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 f93c 	bl	80011e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f70:	f000 f87e 	bl	8001070 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f74:	f000 f8ea 	bl	800114c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <main+0x34>)
 8000f7a:	f002 fcbc 	bl	80038f6 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, array, LENGTH);
 8000f7e:	2203      	movs	r2, #3
 8000f80:	4903      	ldr	r1, [pc, #12]	; (8000f90 <main+0x38>)
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <main+0x3c>)
 8000f84:	f000 fe72 	bl	8001c6c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x30>
 8000f8a:	bf00      	nop
 8000f8c:	20000204 	.word	0x20000204
 8000f90:	200002ec 	.word	0x200002ec
 8000f94:	20000244 	.word	0x20000244

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	; 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fbde 	bl	8004768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SystemClock_Config+0xd4>)
 8000fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800100c:	2310      	movs	r3, #16
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001010:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001016:	2304      	movs	r3, #4
 8001018:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800101a:	2307      	movs	r3, #7
 800101c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	4618      	mov	r0, r3
 8001024:	f001 ffda 	bl	8002fdc <HAL_RCC_OscConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800102e:	f000 fa55 	bl	80014dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	230f      	movs	r3, #15
 8001034:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2302      	movs	r3, #2
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fa34 	bl	80034bc <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800105a:	f000 fa3f 	bl	80014dc <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <MX_ADC1_Init+0xd4>)
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <MX_ADC1_Init+0xd8>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_ADC1_Init+0xd4>)
 800108a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800108e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <MX_ADC1_Init+0xd4>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_ADC1_Init+0xd4>)
 8001098:	2201      	movs	r2, #1
 800109a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <MX_ADC1_Init+0xd4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010c2:	2203      	movs	r2, #3
 80010c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d4:	481b      	ldr	r0, [pc, #108]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010d6:	f000 fc45 	bl	8001964 <HAL_ADC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010e0:	f000 f9fc 	bl	80014dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010ec:	2307      	movs	r3, #7
 80010ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <MX_ADC1_Init+0xd4>)
 80010f6:	f000 feab 	bl	8001e50 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001100:	f000 f9ec 	bl	80014dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001104:	2310      	movs	r3, #16
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <MX_ADC1_Init+0xd4>)
 8001112:	f000 fe9d 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800111c:	f000 f9de 	bl	80014dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001120:	2311      	movs	r3, #17
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001124:	2303      	movs	r3, #3
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_ADC1_Init+0xd4>)
 800112e:	f000 fe8f 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001138:	f000 f9d0 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000244 	.word	0x20000244
 8001148:	40012000 	.word	0x40012000

0800114c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_TIM3_Init+0x94>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <MX_TIM3_Init+0x98>)
 800116c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001170:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001174:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_TIM3_Init+0x94>)
 800117e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001182:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_TIM3_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001190:	4813      	ldr	r0, [pc, #76]	; (80011e0 <MX_TIM3_Init+0x94>)
 8001192:	f002 fb85 	bl	80038a0 <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800119c:	f000 f99e 	bl	80014dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_TIM3_Init+0x94>)
 80011ae:	f002 fbc6 	bl	800393e <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011b8:	f000 f990 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011bc:	2320      	movs	r3, #32
 80011be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM3_Init+0x94>)
 80011ca:	f002 fd89 	bl	8003ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f000 f982 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000204 	.word	0x20000204
 80011e4:	40000400 	.word	0x40000400

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f002 fdcc 	bl	8003dbc <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f957 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002f8 	.word	0x200002f8
 8001238:	40004400 	.word	0x40004400

0800123c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_DMA_Init+0x3c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <MX_DMA_Init+0x3c>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_DMA_Init+0x3c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2038      	movs	r0, #56	; 0x38
 8001264:	f001 f979 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001268:	2038      	movs	r0, #56	; 0x38
 800126a:	f001 f992 	bl	8002592 <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a2c      	ldr	r2, [pc, #176]	; (800134c <MX_GPIO_Init+0xd0>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a25      	ldr	r2, [pc, #148]	; (800134c <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_GPIO_Init+0xd0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MX_GPIO_Init+0xd0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_GPIO_Init+0xd0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <MX_GPIO_Init+0xd0>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2120      	movs	r1, #32
 8001306:	4812      	ldr	r0, [pc, #72]	; (8001350 <MX_GPIO_Init+0xd4>)
 8001308:	f001 fe4e 	bl	8002fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_GPIO_Init+0xd8>)
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_GPIO_Init+0xdc>)
 8001322:	f001 fcbf 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001326:	2320      	movs	r3, #32
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_GPIO_Init+0xd4>)
 800133e:	f001 fcb1 	bl	8002ca4 <HAL_GPIO_Init>

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	10210000 	.word	0x10210000
 8001358:	40020800 	.word	0x40020800
 800135c:	00000000 	.word	0x00000000

08001360 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001364:	b09a      	sub	sp, #104	; 0x68
 8001366:	af06      	add	r7, sp, #24
 8001368:	6078      	str	r0, [r7, #4]
	float pot = array[0]*3.3/4096;
 800136a:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_ADC_ConvCpltCallback+0x168>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8d0 	bl	8000514 <__aeabi_ui2d>
 8001374:	a34c      	add	r3, pc, #304	; (adr r3, 80014a8 <HAL_ADC_ConvCpltCallback+0x148>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f945 	bl	8000608 <__aeabi_dmul>
 800137e:	4603      	mov	r3, r0
 8001380:	460c      	mov	r4, r1
 8001382:	4618      	mov	r0, r3
 8001384:	4621      	mov	r1, r4
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_ADC_ConvCpltCallback+0x16c>)
 800138c:	f7ff fa66 	bl	800085c <__aeabi_ddiv>
 8001390:	4603      	mov	r3, r0
 8001392:	460c      	mov	r4, r1
 8001394:	4618      	mov	r0, r3
 8001396:	4621      	mov	r1, r4
 8001398:	f7ff fc0e 	bl	8000bb8 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
	float vtemp = array[1]*3.3/4096;
 80013a0:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <HAL_ADC_ConvCpltCallback+0x168>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8b5 	bl	8000514 <__aeabi_ui2d>
 80013aa:	a33f      	add	r3, pc, #252	; (adr r3, 80014a8 <HAL_ADC_ConvCpltCallback+0x148>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff f92a 	bl	8000608 <__aeabi_dmul>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <HAL_ADC_ConvCpltCallback+0x16c>)
 80013c2:	f7ff fa4b 	bl	800085c <__aeabi_ddiv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4618      	mov	r0, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	f7ff fbf3 	bl	8000bb8 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
	float ref = (1.21*4096)/array[2];
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_ADC_ConvCpltCallback+0x168>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f89a 	bl	8000514 <__aeabi_ui2d>
 80013e0:	4603      	mov	r3, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	461a      	mov	r2, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	a131      	add	r1, pc, #196	; (adr r1, 80014b0 <HAL_ADC_ConvCpltCallback+0x150>)
 80013ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013ee:	f7ff fa35 	bl	800085c <__aeabi_ddiv>
 80013f2:	4603      	mov	r3, r0
 80013f4:	460c      	mov	r4, r1
 80013f6:	4618      	mov	r0, r3
 80013f8:	4621      	mov	r1, r4
 80013fa:	f7ff fbdd 	bl	8000bb8 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	647b      	str	r3, [r7, #68]	; 0x44

	float temp = (vtemp - 0.76)/0.0025 + 25;
 8001402:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001404:	f7ff f8a8 	bl	8000558 <__aeabi_f2d>
 8001408:	a32b      	add	r3, pc, #172	; (adr r3, 80014b8 <HAL_ADC_ConvCpltCallback+0x158>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7fe ff43 	bl	8000298 <__aeabi_dsub>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	4618      	mov	r0, r3
 8001418:	4621      	mov	r1, r4
 800141a:	a329      	add	r3, pc, #164	; (adr r3, 80014c0 <HAL_ADC_ConvCpltCallback+0x160>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff fa1c 	bl	800085c <__aeabi_ddiv>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4618      	mov	r0, r3
 800142a:	4621      	mov	r1, r4
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_ADC_ConvCpltCallback+0x170>)
 8001432:	f7fe ff33 	bl	800029c <__adddf3>
 8001436:	4603      	mov	r3, r0
 8001438:	460c      	mov	r4, r1
 800143a:	4618      	mov	r0, r3
 800143c:	4621      	mov	r1, r4
 800143e:	f7ff fbbb 	bl	8000bb8 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	643b      	str	r3, [r7, #64]	; 0x40

	char str[50];
	snprintf(str, sizeof(str), "Pot: %1.3fV\r\nSup: %1.3fV\r\nTemp: %2.1f°C\r\n", pot, ref, temp);
 8001446:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001448:	f7ff f886 	bl	8000558 <__aeabi_f2d>
 800144c:	4604      	mov	r4, r0
 800144e:	460d      	mov	r5, r1
 8001450:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001452:	f7ff f881 	bl	8000558 <__aeabi_f2d>
 8001456:	4680      	mov	r8, r0
 8001458:	4689      	mov	r9, r1
 800145a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800145c:	f7ff f87c 	bl	8000558 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	f107 000c 	add.w	r0, r7, #12
 8001468:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800146c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001470:	e9cd 4500 	strd	r4, r5, [sp]
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001476:	2132      	movs	r1, #50	; 0x32
 8001478:	f003 fdda 	bl	8005030 <sniprintf>
	HAL_UART_Transmit(&huart2, str, strlen(str), 1000);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fead 	bl	80001e0 <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	f107 010c 	add.w	r1, r7, #12
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <HAL_ADC_ConvCpltCallback+0x178>)
 8001494:	f002 fcdf 	bl	8003e56 <HAL_UART_Transmit>
}
 8001498:	bf00      	nop
 800149a:	3750      	adds	r7, #80	; 0x50
 800149c:	46bd      	mov	sp, r7
 800149e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	66666666 	.word	0x66666666
 80014ac:	400a6666 	.word	0x400a6666
 80014b0:	f5c28f5c 	.word	0xf5c28f5c
 80014b4:	40b35c28 	.word	0x40b35c28
 80014b8:	851eb852 	.word	0x851eb852
 80014bc:	3fe851eb 	.word	0x3fe851eb
 80014c0:	47ae147b 	.word	0x47ae147b
 80014c4:	3f647ae1 	.word	0x3f647ae1
 80014c8:	200002ec 	.word	0x200002ec
 80014cc:	40b00000 	.word	0x40b00000
 80014d0:	40390000 	.word	0x40390000
 80014d4:	08006830 	.word	0x08006830
 80014d8:	200002f8 	.word	0x200002f8

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	2007      	movs	r0, #7
 800152c:	f001 f80a 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a33      	ldr	r2, [pc, #204]	; (8001628 <HAL_ADC_MspInit+0xec>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d15f      	bne.n	800161e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_ADC_MspInit+0xf0>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a31      	ldr	r2, [pc, #196]	; (800162c <HAL_ADC_MspInit+0xf0>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_ADC_MspInit+0xf0>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_ADC_MspInit+0xf0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <HAL_ADC_MspInit+0xf0>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_ADC_MspInit+0xf0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001596:	2302      	movs	r3, #2
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159a:	2303      	movs	r3, #3
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4821      	ldr	r0, [pc, #132]	; (8001630 <HAL_ADC_MspInit+0xf4>)
 80015aa:	f001 fb7b 	bl	8002ca4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_ADC_MspInit+0xfc>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015f2:	4810      	ldr	r0, [pc, #64]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 80015f4:	f000 ffe8 	bl	80025c8 <HAL_DMA_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015fe:	f7ff ff6d 	bl	80014dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 8001606:	639a      	str	r2, [r3, #56]	; 0x38
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_ADC_MspInit+0xf8>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2012      	movs	r0, #18
 8001614:	f000 ffa1 	bl	800255a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001618:	2012      	movs	r0, #18
 800161a:	f000 ffba 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40012000 	.word	0x40012000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	2000028c 	.word	0x2000028c
 8001638:	40026410 	.word	0x40026410

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <HAL_TIM_Base_MspInit+0x3c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10d      	bne.n	800166a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40000400 	.word	0x40000400
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_UART_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12b      	bne.n	80016fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_UART_MspInit+0x88>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_UART_MspInit+0x88>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_UART_MspInit+0x88>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_UART_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_UART_MspInit+0x88>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_UART_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016da:	230c      	movs	r3, #12
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ea:	2307      	movs	r3, #7
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_UART_MspInit+0x8c>)
 80016f6:	f001 fad5 	bl	8002ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40004400 	.word	0x40004400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f8de 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <ADC_IRQHandler+0x10>)
 8001772:	f000 f93a 	bl	80019ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000244 	.word	0x20000244

08001780 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA2_Stream0_IRQHandler+0x10>)
 8001786:	f001 f825 	bl	80027d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000028c 	.word	0x2000028c

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f002 ffa6 	bl	8004714 <__errno>
 80017c8:	4602      	mov	r2, r0
 80017ca:	230c      	movs	r3, #12
 80017cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20018000 	.word	0x20018000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	200001f8 	.word	0x200001f8
 80017fc:	20000340 	.word	0x20000340

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <SystemInit+0x28>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <SystemInit+0x28>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SystemInit+0x28>)
 8001816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181a:	609a      	str	r2, [r3, #8]
#endif
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001832:	e003      	b.n	800183c <LoopCopyDataInit>

08001834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800183a:	3104      	adds	r1, #4

0800183c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001844:	d3f6      	bcc.n	8001834 <CopyDataInit>
  ldr  r2, =_sbss
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001848:	e002      	b.n	8001850 <LoopFillZerobss>

0800184a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800184a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800184c:	f842 3b04 	str.w	r3, [r2], #4

08001850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001854:	d3f9      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001856:	f7ff ffd3 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185a:	f002 ff61 	bl	8004720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fb7b 	bl	8000f58 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001864:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001868:	08006ae8 	.word	0x08006ae8
  ldr  r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001870:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001874:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001878:	20000340 	.word	0x20000340

0800187c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <DMA1_Stream0_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_Init+0x40>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_Init+0x40>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x40>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 fe4b 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe1a 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fe63 	bl	80025ae <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 fe2b 	bl	800255a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008
 8001948:	20000338 	.word	0x20000338

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000338 	.word	0x20000338

08001964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e033      	b.n	80019e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fdda 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019aa:	f023 0302 	bic.w	r3, r3, #2
 80019ae:	f043 0202 	orr.w	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fb6c 	bl	8002094 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f023 0303 	bic.w	r3, r3, #3
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
 80019d2:	e001      	b.n	80019d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d049      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0xd6>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d046      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d12b      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d127      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d119      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0220 	bic.w	r2, r2, #32
 8001a8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fc55 	bl	8001360 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0212 	mvn.w	r2, #18
 8001abe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d057      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x1b8>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d054      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d139      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d12b      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d124      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11d      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d119      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b6c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0201 	orr.w	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fbfc 	bl	8002390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 020c 	mvn.w	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	bf0c      	ite	eq
 8001bc6:	2301      	moveq	r3, #1
 8001bc8:	2300      	movne	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d017      	beq.n	8001c04 <HAL_ADC_IRQHandler+0x21a>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d014      	beq.n	8001c04 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10d      	bne.n	8001c04 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f917 	bl	8001e28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0201 	mvn.w	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	bf0c      	ite	eq
 8001c12:	2301      	moveq	r3, #1
 8001c14:	2300      	movne	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d015      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x27a>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f043 0202 	orr.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0220 	mvn.w	r2, #32
 8001c52:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f1 	bl	8001e3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0220 	mvn.w	r2, #32
 8001c62:	601a      	str	r2, [r3, #0]
  }
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Start_DMA+0x1e>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e0b1      	b.n	8001dee <HAL_ADC_Start_DMA+0x182>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d018      	beq.n	8001cd2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb0:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <HAL_ADC_Start_DMA+0x18c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_ADC_Start_DMA+0x190>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9a      	lsrs	r2, r3, #18
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cc4:	e002      	b.n	8001ccc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f9      	bne.n	8001cc6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	f040 8085 	bne.w	8001dec <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d20:	d106      	bne.n	8001d30 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f023 0206 	bic.w	r2, r3, #6
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d2e:	e002      	b.n	8001d36 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_ADC_Start_DMA+0x194>)
 8001d40:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d46:	4a2f      	ldr	r2, [pc, #188]	; (8001e04 <HAL_ADC_Start_DMA+0x198>)
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	4a2e      	ldr	r2, [pc, #184]	; (8001e08 <HAL_ADC_Start_DMA+0x19c>)
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	4a2d      	ldr	r2, [pc, #180]	; (8001e0c <HAL_ADC_Start_DMA+0x1a0>)
 8001d58:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d72:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d82:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	334c      	adds	r3, #76	; 0x4c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f000 fcc6 	bl	8002724 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10f      	bne.n	8001dc4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11c      	bne.n	8001dec <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	e013      	b.n	8001dec <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_ADC_Start_DMA+0x1a4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10e      	bne.n	8001dec <HAL_ADC_Start_DMA+0x180>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	40012300 	.word	0x40012300
 8001e04:	0800228d 	.word	0x0800228d
 8001e08:	08002347 	.word	0x08002347
 8001e0c:	08002363 	.word	0x08002363
 8001e10:	40012000 	.word	0x40012000

08001e14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1c>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e105      	b.n	8002078 <HAL_ADC_ConfigChannel+0x228>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	d925      	bls.n	8001ec8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b1e      	subs	r3, #30
 8001e92:	2207      	movs	r2, #7
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4403      	add	r3, r0
 8001eba:	3b1e      	subs	r3, #30
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	e022      	b.n	8001f0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	2207      	movs	r2, #7
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	400a      	ands	r2, r1
 8001eea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4403      	add	r3, r0
 8001f04:	409a      	lsls	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d824      	bhi.n	8001f60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b05      	subs	r3, #5
 8001f28:	221f      	movs	r2, #31
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b05      	subs	r3, #5
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5e:	e04c      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d824      	bhi.n	8001fb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b23      	subs	r3, #35	; 0x23
 8001f7a:	221f      	movs	r2, #31
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43da      	mvns	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	400a      	ands	r2, r1
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b23      	subs	r3, #35	; 0x23
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb0:	e023      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b41      	subs	r3, #65	; 0x41
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b41      	subs	r3, #65	; 0x41
 8001fee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_ADC_ConfigChannel+0x234>)
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_ADC_ConfigChannel+0x238>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d109      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1cc>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d105      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_ADC_ConfigChannel+0x238>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d123      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b10      	cmp	r3, #16
 800202c:	d003      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x1e6>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b11      	cmp	r3, #17
 8002034:	d11b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b10      	cmp	r3, #16
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_ADC_ConfigChannel+0x23c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_ADC_ConfigChannel+0x240>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9a      	lsrs	r2, r3, #18
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002060:	e002      	b.n	8002068 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40012300 	.word	0x40012300
 8002088:	40012000 	.word	0x40012000
 800208c:	20000000 	.word	0x20000000
 8002090:	431bde83 	.word	0x431bde83

08002094 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209c:	4b79      	ldr	r3, [pc, #484]	; (8002284 <ADC_Init+0x1f0>)
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	021a      	lsls	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	4a58      	ldr	r2, [pc, #352]	; (8002288 <ADC_Init+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800213a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e00f      	b.n	8002192 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002190:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0202 	bic.w	r2, r2, #2
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
 80021ac:	005a      	lsls	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	035a      	lsls	r2, r3, #13
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e007      	b.n	8002208 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	3b01      	subs	r3, #1
 8002224:	051a      	lsls	r2, r3, #20
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800223c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800224a:	025a      	lsls	r2, r3, #9
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	029a      	lsls	r2, r3, #10
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40012300 	.word	0x40012300
 8002288:	0f000001 	.word	0x0f000001

0800228c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d13c      	bne.n	8002320 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12b      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d127      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d119      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0220 	bic.w	r2, r2, #32
 80022f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff f821 	bl	8001360 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800231e:	e00e      	b.n	800233e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fd85 	bl	8001e3c <HAL_ADC_ErrorCallback>
}
 8002332:	e004      	b.n	800233e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff fd5d 	bl	8001e14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff fd5a 	bl	8001e3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002510:	d301      	bcc.n	8002516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002512:	2301      	movs	r3, #1
 8002514:	e00f      	b.n	8002536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <SysTick_Config+0x40>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251e:	210f      	movs	r1, #15
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f7ff ff8e 	bl	8002444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <SysTick_Config+0x40>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <SysTick_Config+0x40>)
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff29 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800256c:	f7ff ff3e 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff8e 	bl	8002498 <NVIC_EncodePriority>
 800257c:	4602      	mov	r2, r0
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff5d 	bl	8002444 <__NVIC_SetPriority>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff31 	bl	8002408 <__NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffa2 	bl	8002500 <SysTick_Config>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff f9ba 	bl	800194c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e099      	b.n	8002718 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002604:	e00f      	b.n	8002626 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002606:	f7ff f9a1 	bl	800194c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b05      	cmp	r3, #5
 8002612:	d908      	bls.n	8002626 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e078      	b.n	8002718 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e8      	bne.n	8002606 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_DMA_Init+0x158>)
 8002640:	4013      	ands	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002652:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2b04      	cmp	r3, #4
 800267e:	d107      	bne.n	8002690 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	4313      	orrs	r3, r2
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0307 	bic.w	r3, r3, #7
 80026a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d117      	bne.n	80026ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa6f 	bl	8002bb0 <DMA_CheckFifoParam>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026e6:	2301      	movs	r3, #1
 80026e8:	e016      	b.n	8002718 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa26 	bl	8002b44 <DMA_CalcBaseAndBitshift>
 80026f8:	4603      	mov	r3, r0
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	223f      	movs	r2, #63	; 0x3f
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	f010803f 	.word	0xf010803f

08002724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_DMA_Start_IT+0x26>
 8002746:	2302      	movs	r3, #2
 8002748:	e040      	b.n	80027cc <HAL_DMA_Start_IT+0xa8>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d12f      	bne.n	80027be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f9b8 	bl	8002ae8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	223f      	movs	r2, #63	; 0x3f
 800277e:	409a      	lsls	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0216 	orr.w	r2, r2, #22
 8002792:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0208 	orr.w	r2, r2, #8
 80027aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e005      	b.n	80027ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e0:	4b92      	ldr	r3, [pc, #584]	; (8002a2c <HAL_DMA_IRQHandler+0x258>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a92      	ldr	r2, [pc, #584]	; (8002a30 <HAL_DMA_IRQHandler+0x25c>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	2208      	movs	r2, #8
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01a      	beq.n	8002840 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	2208      	movs	r2, #8
 800282e:	409a      	lsls	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	2201      	movs	r2, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d012      	beq.n	8002876 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	2204      	movs	r2, #4
 800287c:	409a      	lsls	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2210      	movs	r2, #16
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d043      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03c      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ce:	2210      	movs	r2, #16
 80028d0:	409a      	lsls	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d024      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e01f      	b.n	8002944 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e016      	b.n	8002944 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0208 	bic.w	r2, r2, #8
 8002932:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	2220      	movs	r2, #32
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 808e 	beq.w	8002a72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8086 	beq.w	8002a72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	2220      	movs	r2, #32
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b05      	cmp	r3, #5
 800297c:	d136      	bne.n	80029ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0216 	bic.w	r2, r2, #22
 800298c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_DMA_IRQHandler+0x1da>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0208 	bic.w	r2, r2, #8
 80029bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	223f      	movs	r2, #63	; 0x3f
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d07d      	beq.n	8002ade <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
        }
        return;
 80029ea:	e078      	b.n	8002ade <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01c      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d108      	bne.n	8002a1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d030      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e02b      	b.n	8002a72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d027      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
 8002a2a:	e022      	b.n	8002a72 <HAL_DMA_IRQHandler+0x29e>
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0210 	bic.w	r2, r2, #16
 8002a50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d032      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d022      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2205      	movs	r2, #5
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d307      	bcc.n	8002aba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f2      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x2ca>
 8002ab8:	e000      	b.n	8002abc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002aba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	e000      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ade:	bf00      	nop
    }
  }
}
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop

08002ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d108      	bne.n	8002b28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b26:	e007      	b.n	8002b38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3b10      	subs	r3, #16
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <DMA_CalcBaseAndBitshift+0x68>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d909      	bls.n	8002b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58
 8002b84:	e007      	b.n	8002b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab
 8002bac:	08006874 	.word	0x08006874

08002bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11f      	bne.n	8002c0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d855      	bhi.n	8002c7c <DMA_CheckFifoParam+0xcc>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <DMA_CheckFifoParam+0x28>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bfb 	.word	0x08002bfb
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c7d 	.word	0x08002c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d045      	beq.n	8002c80 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e042      	b.n	8002c80 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c02:	d13f      	bne.n	8002c84 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e03c      	b.n	8002c84 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c12:	d121      	bne.n	8002c58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d836      	bhi.n	8002c88 <DMA_CheckFifoParam+0xd8>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <DMA_CheckFifoParam+0x70>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c37 	.word	0x08002c37
 8002c28:	08002c31 	.word	0x08002c31
 8002c2c:	08002c49 	.word	0x08002c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e02f      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d024      	beq.n	8002c8c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c46:	e021      	b.n	8002c8c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c50:	d11e      	bne.n	8002c90 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c56:	e01b      	b.n	8002c90 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <DMA_CheckFifoParam+0xb4>
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d003      	beq.n	8002c6a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c62:	e018      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e015      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00e      	beq.n	8002c94 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7a:	e00b      	b.n	8002c94 <DMA_CheckFifoParam+0xe4>
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e00a      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c80:	bf00      	nop
 8002c82:	e008      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c84:	bf00      	nop
 8002c86:	e006      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e004      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c94:	bf00      	nop
    }
  } 
  
  return status; 
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e159      	b.n	8002f74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f040 8148 	bne.w	8002f6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d00b      	beq.n	8002cfe <HAL_GPIO_Init+0x5a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d007      	beq.n	8002cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf2:	2b11      	cmp	r3, #17
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d130      	bne.n	8002d60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 0201 	and.w	r2, r3, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0xfc>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b12      	cmp	r3, #18
 8002d9e:	d123      	bne.n	8002de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0203 	and.w	r2, r3, #3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a2 	beq.w	8002f6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <HAL_GPIO_Init+0x2e4>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a55      	ldr	r2, [pc, #340]	; (8002f88 <HAL_GPIO_Init+0x2e4>)
 8002e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_GPIO_Init+0x2e4>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e46:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x2e8>)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a48      	ldr	r2, [pc, #288]	; (8002f90 <HAL_GPIO_Init+0x2ec>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x202>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a47      	ldr	r2, [pc, #284]	; (8002f94 <HAL_GPIO_Init+0x2f0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x1fe>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a46      	ldr	r2, [pc, #280]	; (8002f98 <HAL_GPIO_Init+0x2f4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x1fa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a45      	ldr	r2, [pc, #276]	; (8002f9c <HAL_GPIO_Init+0x2f8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x1f6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a44      	ldr	r2, [pc, #272]	; (8002fa0 <HAL_GPIO_Init+0x2fc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x1f2>
 8002e92:	2304      	movs	r3, #4
 8002e94:	e008      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	f002 0203 	and.w	r2, r2, #3
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb8:	4934      	ldr	r1, [pc, #208]	; (8002f8c <HAL_GPIO_Init+0x2e8>)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eea:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f14:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	f67f aea2 	bls.w	8002cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3724      	adds	r7, #36	; 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40020000 	.word	0x40020000
 8002f94:	40020400 	.word	0x40020400
 8002f98:	40020800 	.word	0x40020800
 8002f9c:	40020c00 	.word	0x40020c00
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40013c00 	.word	0x40013c00

08002fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc4:	e003      	b.n	8002fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	619a      	str	r2, [r3, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e25b      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d075      	beq.n	80030e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffa:	4ba3      	ldr	r3, [pc, #652]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b04      	cmp	r3, #4
 8003004:	d00c      	beq.n	8003020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4ba0      	ldr	r3, [pc, #640]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300e:	2b08      	cmp	r3, #8
 8003010:	d112      	bne.n	8003038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4b9d      	ldr	r3, [pc, #628]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b99      	ldr	r3, [pc, #612]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d05b      	beq.n	80030e4 <HAL_RCC_OscConfig+0x108>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d157      	bne.n	80030e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e236      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x74>
 8003042:	4b91      	ldr	r3, [pc, #580]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a90      	ldr	r2, [pc, #576]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xb0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x98>
 800305a:	4b8b      	ldr	r3, [pc, #556]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a8a      	ldr	r2, [pc, #552]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b88      	ldr	r3, [pc, #544]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a87      	ldr	r2, [pc, #540]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xb0>
 8003074:	4b84      	ldr	r3, [pc, #528]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a83      	ldr	r2, [pc, #524]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a80      	ldr	r2, [pc, #512]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe fc5a 	bl	800194c <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe fc56 	bl	800194c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1fb      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b76      	ldr	r3, [pc, #472]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xc0>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fc46 	bl	800194c <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fc42 	bl	800194c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1e7      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b6c      	ldr	r3, [pc, #432]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0xe8>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d063      	beq.n	80031ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b62      	ldr	r3, [pc, #392]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b5f      	ldr	r3, [pc, #380]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x152>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1bb      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4952      	ldr	r1, [pc, #328]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e03a      	b.n	80031ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b4f      	ldr	r3, [pc, #316]	; (800328c <HAL_RCC_OscConfig+0x2b0>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe fbfb 	bl	800194c <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315a:	f7fe fbf7 	bl	800194c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e19c      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4940      	ldr	r1, [pc, #256]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	e015      	b.n	80031ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_OscConfig+0x2b0>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe fbda 	bl	800194c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319c:	f7fe fbd6 	bl	800194c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e17b      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d030      	beq.n	8003228 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_RCC_OscConfig+0x2b4>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fbba 	bl	800194c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe fbb6 	bl	800194c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e15b      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x200>
 80031fa:	e015      	b.n	8003228 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_OscConfig+0x2b4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe fba3 	bl	800194c <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe fb9f 	bl	800194c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e144      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a0 	beq.w	8003376 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_OscConfig+0x2b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d121      	bne.n	80032b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x2b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0x2b8>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fe fb65 	bl	800194c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	e011      	b.n	80032aa <HAL_RCC_OscConfig+0x2ce>
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	42470000 	.word	0x42470000
 8003290:	42470e80 	.word	0x42470e80
 8003294:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003298:	f7fe fb58 	bl	800194c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0fd      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x4d4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x2f0>
 80032be:	4b7d      	ldr	r3, [pc, #500]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a7c      	ldr	r2, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e01c      	b.n	8003306 <HAL_RCC_OscConfig+0x32a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x312>
 80032d4:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a76      	ldr	r2, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a73      	ldr	r2, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x32a>
 80032ee:	4b71      	ldr	r3, [pc, #452]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a70      	ldr	r2, [pc, #448]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a6d      	ldr	r2, [pc, #436]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d015      	beq.n	800333a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fb1d 	bl	800194c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fb19 	bl	800194c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0bc      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCC_OscConfig+0x33a>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe fb07 	bl	800194c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fb03 	bl	800194c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0a6      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b52      	ldr	r3, [pc, #328]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a51      	ldr	r2, [pc, #324]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8092 	beq.w	80034a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d05c      	beq.n	8003446 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d141      	bne.n	8003418 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <HAL_RCC_OscConfig+0x4dc>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fe fad7 	bl	800194c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe fad3 	bl	800194c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e078      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	019b      	lsls	r3, r3, #6
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	4933      	ldr	r1, [pc, #204]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_RCC_OscConfig+0x4dc>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe faac 	bl	800194c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe faa8 	bl	800194c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e04d      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x41c>
 8003416:	e045      	b.n	80034a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_RCC_OscConfig+0x4dc>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe fa95 	bl	800194c <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe fa91 	bl	800194c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e036      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003438:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x44a>
 8003444:	e02e      	b.n	80034a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e029      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	429a      	cmp	r2, r3
 8003464:	d11c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d115      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d106      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40007000 	.word	0x40007000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	42470060 	.word	0x42470060

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0cc      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b68      	ldr	r3, [pc, #416]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d90c      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b63      	ldr	r3, [pc, #396]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0b8      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a58      	ldr	r2, [pc, #352]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800351a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a52      	ldr	r2, [pc, #328]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	494d      	ldr	r1, [pc, #308]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d044      	beq.n	80035dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d119      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e07f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d003      	beq.n	800357a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003576:	2b03      	cmp	r3, #3
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e067      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4934      	ldr	r1, [pc, #208]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ac:	f7fe f9ce 	bl	800194c <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe f9ca 	bl	800194c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e04f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d20c      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e032      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4916      	ldr	r1, [pc, #88]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	490e      	ldr	r1, [pc, #56]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003642:	f000 f821 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003646:	4601      	mov	r1, r0
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	5cd3      	ldrb	r3, [r2, r3]
 8003656:	fa21 f303 	lsr.w	r3, r1, r3
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe f92e 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023c00 	.word	0x40023c00
 8003678:	40023800 	.word	0x40023800
 800367c:	0800685c 	.word	0x0800685c
 8003680:	20000000 	.word	0x20000000
 8003684:	20000004 	.word	0x20000004

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d007      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x32>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d008      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x38>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 80b4 	bne.w	800381c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036b6:	60bb      	str	r3, [r7, #8]
       break;
 80036b8:	e0b3      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ba:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036bc:	60bb      	str	r3, [r7, #8]
      break;
 80036be:	e0b0      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c0:	4b5a      	ldr	r3, [pc, #360]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ca:	4b58      	ldr	r3, [pc, #352]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d04a      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d6:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	099b      	lsrs	r3, r3, #6
 80036dc:	f04f 0400 	mov.w	r4, #0
 80036e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	ea03 0501 	and.w	r5, r3, r1
 80036ec:	ea04 0602 	and.w	r6, r4, r2
 80036f0:	4629      	mov	r1, r5
 80036f2:	4632      	mov	r2, r6
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	0154      	lsls	r4, r2, #5
 80036fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003702:	014b      	lsls	r3, r1, #5
 8003704:	4619      	mov	r1, r3
 8003706:	4622      	mov	r2, r4
 8003708:	1b49      	subs	r1, r1, r5
 800370a:	eb62 0206 	sbc.w	r2, r2, r6
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	0194      	lsls	r4, r2, #6
 8003718:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800371c:	018b      	lsls	r3, r1, #6
 800371e:	1a5b      	subs	r3, r3, r1
 8003720:	eb64 0402 	sbc.w	r4, r4, r2
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	00e2      	lsls	r2, r4, #3
 800372e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003732:	00d9      	lsls	r1, r3, #3
 8003734:	460b      	mov	r3, r1
 8003736:	4614      	mov	r4, r2
 8003738:	195b      	adds	r3, r3, r5
 800373a:	eb44 0406 	adc.w	r4, r4, r6
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	0262      	lsls	r2, r4, #9
 8003748:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800374c:	0259      	lsls	r1, r3, #9
 800374e:	460b      	mov	r3, r1
 8003750:	4614      	mov	r4, r2
 8003752:	4618      	mov	r0, r3
 8003754:	4621      	mov	r1, r4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	f7fd fa7a 	bl	8000c58 <__aeabi_uldivmod>
 8003764:	4603      	mov	r3, r0
 8003766:	460c      	mov	r4, r1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e049      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b2f      	ldr	r3, [pc, #188]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	f240 11ff 	movw	r1, #511	; 0x1ff
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	ea03 0501 	and.w	r5, r3, r1
 8003782:	ea04 0602 	and.w	r6, r4, r2
 8003786:	4629      	mov	r1, r5
 8003788:	4632      	mov	r2, r6
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	0154      	lsls	r4, r2, #5
 8003794:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003798:	014b      	lsls	r3, r1, #5
 800379a:	4619      	mov	r1, r3
 800379c:	4622      	mov	r2, r4
 800379e:	1b49      	subs	r1, r1, r5
 80037a0:	eb62 0206 	sbc.w	r2, r2, r6
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	0194      	lsls	r4, r2, #6
 80037ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	eb64 0402 	sbc.w	r4, r4, r2
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	00e2      	lsls	r2, r4, #3
 80037c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037c8:	00d9      	lsls	r1, r3, #3
 80037ca:	460b      	mov	r3, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	195b      	adds	r3, r3, r5
 80037d0:	eb44 0406 	adc.w	r4, r4, r6
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	02a2      	lsls	r2, r4, #10
 80037de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037e2:	0299      	lsls	r1, r3, #10
 80037e4:	460b      	mov	r3, r1
 80037e6:	4614      	mov	r4, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	4621      	mov	r1, r4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	461a      	mov	r2, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	f7fd fa2f 	bl	8000c58 <__aeabi_uldivmod>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800381e:	60bb      	str	r3, [r7, #8]
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	68bb      	ldr	r3, [r7, #8]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4601      	mov	r1, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4a03      	ldr	r2, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	0800686c 	.word	0x0800686c

08003878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800387c:	f7ff ffdc 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003880:	4601      	mov	r1, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0b5b      	lsrs	r3, r3, #13
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4a03      	ldr	r2, [pc, #12]	; (800389c <HAL_RCC_GetPCLK2Freq+0x24>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	0800686c 	.word	0x0800686c

080038a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e01d      	b.n	80038ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd feb8 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 f8e4 	bl	8003aac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b06      	cmp	r3, #6
 8003916:	d007      	beq.n	8003928 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_TIM_ConfigClockSource+0x18>
 8003952:	2302      	movs	r3, #2
 8003954:	e0a6      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x166>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003974:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d067      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x120>
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d80b      	bhi.n	80039aa <HAL_TIM_ConfigClockSource+0x6c>
 8003992:	2b10      	cmp	r3, #16
 8003994:	d073      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x140>
 8003996:	2b10      	cmp	r3, #16
 8003998:	d802      	bhi.n	80039a0 <HAL_TIM_ConfigClockSource+0x62>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d06f      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800399e:	e078      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d06c      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x140>
 80039a4:	2b30      	cmp	r3, #48	; 0x30
 80039a6:	d06a      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039a8:	e073      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039aa:	2b70      	cmp	r3, #112	; 0x70
 80039ac:	d00d      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x8c>
 80039ae:	2b70      	cmp	r3, #112	; 0x70
 80039b0:	d804      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x7e>
 80039b2:	2b50      	cmp	r3, #80	; 0x50
 80039b4:	d033      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0xe0>
 80039b6:	2b60      	cmp	r3, #96	; 0x60
 80039b8:	d041      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80039ba:	e06a      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c0:	d066      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0x152>
 80039c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c6:	d017      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80039c8:	e063      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f000 f961 	bl	8003ca0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	609a      	str	r2, [r3, #8]
      break;
 80039f6:	e04c      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6899      	ldr	r1, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f000 f94a 	bl	8003ca0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1a:	609a      	str	r2, [r3, #8]
      break;
 8003a1c:	e039      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 f8be 	bl	8003bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2150      	movs	r1, #80	; 0x50
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f917 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e029      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 f8dd 	bl	8003c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2160      	movs	r1, #96	; 0x60
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f907 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e019      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 f89e 	bl	8003bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2140      	movs	r1, #64	; 0x40
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f8f7 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e009      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f000 f8ee 	bl	8003c6a <TIM_ITRx_SetConfig>
      break;
 8003a8e:	e000      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a34      	ldr	r2, [pc, #208]	; (8003b90 <TIM_Base_SetConfig+0xe4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00f      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d00b      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <TIM_Base_SetConfig+0xe8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d007      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a30      	ldr	r2, [pc, #192]	; (8003b98 <TIM_Base_SetConfig+0xec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <TIM_Base_SetConfig+0xf0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d108      	bne.n	8003af6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <TIM_Base_SetConfig+0xe4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01b      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d017      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <TIM_Base_SetConfig+0xe8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <TIM_Base_SetConfig+0xec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <TIM_Base_SetConfig+0xf0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <TIM_Base_SetConfig+0xf4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1e      	ldr	r2, [pc, #120]	; (8003ba4 <TIM_Base_SetConfig+0xf8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <TIM_Base_SetConfig+0xfc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <TIM_Base_SetConfig+0xe4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800

08003bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 030a 	bic.w	r3, r3, #10
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b087      	sub	sp, #28
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f023 0210 	bic.w	r2, r3, #16
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	031b      	lsls	r3, r3, #12
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f043 0307 	orr.w	r3, r3, #7
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e050      	b.n	8003d9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1c      	ldr	r2, [pc, #112]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d018      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d013      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a18      	ldr	r2, [pc, #96]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10c      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00
 8003db8:	40014000 	.word	0x40014000

08003dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e03f      	b.n	8003e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fc4c 	bl	8001680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f90b 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af02      	add	r7, sp, #8
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	f040 8083 	bne.w	8003f7e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_UART_Transmit+0x2e>
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e07b      	b.n	8003f80 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Transmit+0x40>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e074      	b.n	8003f80 <HAL_UART_Transmit+0x12a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2221      	movs	r2, #33	; 0x21
 8003ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003eac:	f7fd fd4e 	bl	800194c <HAL_GetTick>
 8003eb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	88fa      	ldrh	r2, [r7, #6]
 8003ebc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ec6:	e042      	b.n	8003f4e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ede:	d122      	bne.n	8003f26 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f84c 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e042      	b.n	8003f80 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f0c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	e017      	b.n	8003f4e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	e013      	b.n	8003f4e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2180      	movs	r1, #128	; 0x80
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f829 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e01f      	b.n	8003f80 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	60ba      	str	r2, [r7, #8]
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1b7      	bne.n	8003ec8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f810 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e006      	b.n	8003f80 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	e02c      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d028      	beq.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa8:	f7fd fcd0 	bl	800194c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d21d      	bcs.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e00f      	b.n	8004014 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	429a      	cmp	r2, r3
 8004010:	d0c3      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800405e:	f023 030c 	bic.w	r3, r3, #12
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	430b      	orrs	r3, r1
 800406a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408a:	f040 818b 	bne.w	80043a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4ac1      	ldr	r2, [pc, #772]	; (8004398 <UART_SetConfig+0x37c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d005      	beq.n	80040a4 <UART_SetConfig+0x88>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4abf      	ldr	r2, [pc, #764]	; (800439c <UART_SetConfig+0x380>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	f040 80bd 	bne.w	800421e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7ff fbe8 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 80040a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	461d      	mov	r5, r3
 80040ae:	f04f 0600 	mov.w	r6, #0
 80040b2:	46a8      	mov	r8, r5
 80040b4:	46b1      	mov	r9, r6
 80040b6:	eb18 0308 	adds.w	r3, r8, r8
 80040ba:	eb49 0409 	adc.w	r4, r9, r9
 80040be:	4698      	mov	r8, r3
 80040c0:	46a1      	mov	r9, r4
 80040c2:	eb18 0805 	adds.w	r8, r8, r5
 80040c6:	eb49 0906 	adc.w	r9, r9, r6
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040de:	4688      	mov	r8, r1
 80040e0:	4691      	mov	r9, r2
 80040e2:	eb18 0005 	adds.w	r0, r8, r5
 80040e6:	eb49 0106 	adc.w	r1, r9, r6
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	461d      	mov	r5, r3
 80040f0:	f04f 0600 	mov.w	r6, #0
 80040f4:	196b      	adds	r3, r5, r5
 80040f6:	eb46 0406 	adc.w	r4, r6, r6
 80040fa:	461a      	mov	r2, r3
 80040fc:	4623      	mov	r3, r4
 80040fe:	f7fc fdab 	bl	8000c58 <__aeabi_uldivmod>
 8004102:	4603      	mov	r3, r0
 8004104:	460c      	mov	r4, r1
 8004106:	461a      	mov	r2, r3
 8004108:	4ba5      	ldr	r3, [pc, #660]	; (80043a0 <UART_SetConfig+0x384>)
 800410a:	fba3 2302 	umull	r2, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	461d      	mov	r5, r3
 8004118:	f04f 0600 	mov.w	r6, #0
 800411c:	46a9      	mov	r9, r5
 800411e:	46b2      	mov	sl, r6
 8004120:	eb19 0309 	adds.w	r3, r9, r9
 8004124:	eb4a 040a 	adc.w	r4, sl, sl
 8004128:	4699      	mov	r9, r3
 800412a:	46a2      	mov	sl, r4
 800412c:	eb19 0905 	adds.w	r9, r9, r5
 8004130:	eb4a 0a06 	adc.w	sl, sl, r6
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004140:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004144:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004148:	4689      	mov	r9, r1
 800414a:	4692      	mov	sl, r2
 800414c:	eb19 0005 	adds.w	r0, r9, r5
 8004150:	eb4a 0106 	adc.w	r1, sl, r6
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	461d      	mov	r5, r3
 800415a:	f04f 0600 	mov.w	r6, #0
 800415e:	196b      	adds	r3, r5, r5
 8004160:	eb46 0406 	adc.w	r4, r6, r6
 8004164:	461a      	mov	r2, r3
 8004166:	4623      	mov	r3, r4
 8004168:	f7fc fd76 	bl	8000c58 <__aeabi_uldivmod>
 800416c:	4603      	mov	r3, r0
 800416e:	460c      	mov	r4, r1
 8004170:	461a      	mov	r2, r3
 8004172:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <UART_SetConfig+0x384>)
 8004174:	fba3 1302 	umull	r1, r3, r3, r2
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	2164      	movs	r1, #100	; 0x64
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	3332      	adds	r3, #50	; 0x32
 8004186:	4a86      	ldr	r2, [pc, #536]	; (80043a0 <UART_SetConfig+0x384>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004194:	4498      	add	r8, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	461d      	mov	r5, r3
 800419a:	f04f 0600 	mov.w	r6, #0
 800419e:	46a9      	mov	r9, r5
 80041a0:	46b2      	mov	sl, r6
 80041a2:	eb19 0309 	adds.w	r3, r9, r9
 80041a6:	eb4a 040a 	adc.w	r4, sl, sl
 80041aa:	4699      	mov	r9, r3
 80041ac:	46a2      	mov	sl, r4
 80041ae:	eb19 0905 	adds.w	r9, r9, r5
 80041b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ca:	4689      	mov	r9, r1
 80041cc:	4692      	mov	sl, r2
 80041ce:	eb19 0005 	adds.w	r0, r9, r5
 80041d2:	eb4a 0106 	adc.w	r1, sl, r6
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	461d      	mov	r5, r3
 80041dc:	f04f 0600 	mov.w	r6, #0
 80041e0:	196b      	adds	r3, r5, r5
 80041e2:	eb46 0406 	adc.w	r4, r6, r6
 80041e6:	461a      	mov	r2, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	f7fc fd35 	bl	8000c58 <__aeabi_uldivmod>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <UART_SetConfig+0x384>)
 80041f6:	fba3 1302 	umull	r1, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2164      	movs	r1, #100	; 0x64
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	3332      	adds	r3, #50	; 0x32
 8004208:	4a65      	ldr	r2, [pc, #404]	; (80043a0 <UART_SetConfig+0x384>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	f003 0207 	and.w	r2, r3, #7
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4442      	add	r2, r8
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	e26f      	b.n	80046fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800421e:	f7ff fb17 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8004222:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	461d      	mov	r5, r3
 8004228:	f04f 0600 	mov.w	r6, #0
 800422c:	46a8      	mov	r8, r5
 800422e:	46b1      	mov	r9, r6
 8004230:	eb18 0308 	adds.w	r3, r8, r8
 8004234:	eb49 0409 	adc.w	r4, r9, r9
 8004238:	4698      	mov	r8, r3
 800423a:	46a1      	mov	r9, r4
 800423c:	eb18 0805 	adds.w	r8, r8, r5
 8004240:	eb49 0906 	adc.w	r9, r9, r6
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004250:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004254:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004258:	4688      	mov	r8, r1
 800425a:	4691      	mov	r9, r2
 800425c:	eb18 0005 	adds.w	r0, r8, r5
 8004260:	eb49 0106 	adc.w	r1, r9, r6
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	461d      	mov	r5, r3
 800426a:	f04f 0600 	mov.w	r6, #0
 800426e:	196b      	adds	r3, r5, r5
 8004270:	eb46 0406 	adc.w	r4, r6, r6
 8004274:	461a      	mov	r2, r3
 8004276:	4623      	mov	r3, r4
 8004278:	f7fc fcee 	bl	8000c58 <__aeabi_uldivmod>
 800427c:	4603      	mov	r3, r0
 800427e:	460c      	mov	r4, r1
 8004280:	461a      	mov	r2, r3
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <UART_SetConfig+0x384>)
 8004284:	fba3 2302 	umull	r2, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	461d      	mov	r5, r3
 8004292:	f04f 0600 	mov.w	r6, #0
 8004296:	46a9      	mov	r9, r5
 8004298:	46b2      	mov	sl, r6
 800429a:	eb19 0309 	adds.w	r3, r9, r9
 800429e:	eb4a 040a 	adc.w	r4, sl, sl
 80042a2:	4699      	mov	r9, r3
 80042a4:	46a2      	mov	sl, r4
 80042a6:	eb19 0905 	adds.w	r9, r9, r5
 80042aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042c2:	4689      	mov	r9, r1
 80042c4:	4692      	mov	sl, r2
 80042c6:	eb19 0005 	adds.w	r0, r9, r5
 80042ca:	eb4a 0106 	adc.w	r1, sl, r6
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	461d      	mov	r5, r3
 80042d4:	f04f 0600 	mov.w	r6, #0
 80042d8:	196b      	adds	r3, r5, r5
 80042da:	eb46 0406 	adc.w	r4, r6, r6
 80042de:	461a      	mov	r2, r3
 80042e0:	4623      	mov	r3, r4
 80042e2:	f7fc fcb9 	bl	8000c58 <__aeabi_uldivmod>
 80042e6:	4603      	mov	r3, r0
 80042e8:	460c      	mov	r4, r1
 80042ea:	461a      	mov	r2, r3
 80042ec:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <UART_SetConfig+0x384>)
 80042ee:	fba3 1302 	umull	r1, r3, r3, r2
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	2164      	movs	r1, #100	; 0x64
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	3332      	adds	r3, #50	; 0x32
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <UART_SetConfig+0x384>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800430e:	4498      	add	r8, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	461d      	mov	r5, r3
 8004314:	f04f 0600 	mov.w	r6, #0
 8004318:	46a9      	mov	r9, r5
 800431a:	46b2      	mov	sl, r6
 800431c:	eb19 0309 	adds.w	r3, r9, r9
 8004320:	eb4a 040a 	adc.w	r4, sl, sl
 8004324:	4699      	mov	r9, r3
 8004326:	46a2      	mov	sl, r4
 8004328:	eb19 0905 	adds.w	r9, r9, r5
 800432c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800433c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004344:	4689      	mov	r9, r1
 8004346:	4692      	mov	sl, r2
 8004348:	eb19 0005 	adds.w	r0, r9, r5
 800434c:	eb4a 0106 	adc.w	r1, sl, r6
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	461d      	mov	r5, r3
 8004356:	f04f 0600 	mov.w	r6, #0
 800435a:	196b      	adds	r3, r5, r5
 800435c:	eb46 0406 	adc.w	r4, r6, r6
 8004360:	461a      	mov	r2, r3
 8004362:	4623      	mov	r3, r4
 8004364:	f7fc fc78 	bl	8000c58 <__aeabi_uldivmod>
 8004368:	4603      	mov	r3, r0
 800436a:	460c      	mov	r4, r1
 800436c:	461a      	mov	r2, r3
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <UART_SetConfig+0x384>)
 8004370:	fba3 1302 	umull	r1, r3, r3, r2
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	2164      	movs	r1, #100	; 0x64
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	3332      	adds	r3, #50	; 0x32
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <UART_SetConfig+0x384>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	f003 0207 	and.w	r2, r3, #7
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4442      	add	r2, r8
 8004394:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004396:	e1b2      	b.n	80046fe <UART_SetConfig+0x6e2>
 8004398:	40011000 	.word	0x40011000
 800439c:	40011400 	.word	0x40011400
 80043a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4ad7      	ldr	r2, [pc, #860]	; (8004708 <UART_SetConfig+0x6ec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d005      	beq.n	80043ba <UART_SetConfig+0x39e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4ad6      	ldr	r2, [pc, #856]	; (800470c <UART_SetConfig+0x6f0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	f040 80d1 	bne.w	800455c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ba:	f7ff fa5d 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 80043be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	469a      	mov	sl, r3
 80043c4:	f04f 0b00 	mov.w	fp, #0
 80043c8:	46d0      	mov	r8, sl
 80043ca:	46d9      	mov	r9, fp
 80043cc:	eb18 0308 	adds.w	r3, r8, r8
 80043d0:	eb49 0409 	adc.w	r4, r9, r9
 80043d4:	4698      	mov	r8, r3
 80043d6:	46a1      	mov	r9, r4
 80043d8:	eb18 080a 	adds.w	r8, r8, sl
 80043dc:	eb49 090b 	adc.w	r9, r9, fp
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f4:	4688      	mov	r8, r1
 80043f6:	4691      	mov	r9, r2
 80043f8:	eb1a 0508 	adds.w	r5, sl, r8
 80043fc:	eb4b 0609 	adc.w	r6, fp, r9
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4619      	mov	r1, r3
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	f04f 0400 	mov.w	r4, #0
 8004412:	0094      	lsls	r4, r2, #2
 8004414:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004418:	008b      	lsls	r3, r1, #2
 800441a:	461a      	mov	r2, r3
 800441c:	4623      	mov	r3, r4
 800441e:	4628      	mov	r0, r5
 8004420:	4631      	mov	r1, r6
 8004422:	f7fc fc19 	bl	8000c58 <__aeabi_uldivmod>
 8004426:	4603      	mov	r3, r0
 8004428:	460c      	mov	r4, r1
 800442a:	461a      	mov	r2, r3
 800442c:	4bb8      	ldr	r3, [pc, #736]	; (8004710 <UART_SetConfig+0x6f4>)
 800442e:	fba3 2302 	umull	r2, r3, r3, r2
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	469b      	mov	fp, r3
 800443c:	f04f 0c00 	mov.w	ip, #0
 8004440:	46d9      	mov	r9, fp
 8004442:	46e2      	mov	sl, ip
 8004444:	eb19 0309 	adds.w	r3, r9, r9
 8004448:	eb4a 040a 	adc.w	r4, sl, sl
 800444c:	4699      	mov	r9, r3
 800444e:	46a2      	mov	sl, r4
 8004450:	eb19 090b 	adds.w	r9, r9, fp
 8004454:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004464:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004468:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800446c:	4689      	mov	r9, r1
 800446e:	4692      	mov	sl, r2
 8004470:	eb1b 0509 	adds.w	r5, fp, r9
 8004474:	eb4c 060a 	adc.w	r6, ip, sl
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4619      	mov	r1, r3
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	f04f 0400 	mov.w	r4, #0
 800448a:	0094      	lsls	r4, r2, #2
 800448c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	461a      	mov	r2, r3
 8004494:	4623      	mov	r3, r4
 8004496:	4628      	mov	r0, r5
 8004498:	4631      	mov	r1, r6
 800449a:	f7fc fbdd 	bl	8000c58 <__aeabi_uldivmod>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b9a      	ldr	r3, [pc, #616]	; (8004710 <UART_SetConfig+0x6f4>)
 80044a6:	fba3 1302 	umull	r1, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2164      	movs	r1, #100	; 0x64
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a95      	ldr	r2, [pc, #596]	; (8004710 <UART_SetConfig+0x6f4>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c4:	4498      	add	r8, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	469b      	mov	fp, r3
 80044ca:	f04f 0c00 	mov.w	ip, #0
 80044ce:	46d9      	mov	r9, fp
 80044d0:	46e2      	mov	sl, ip
 80044d2:	eb19 0309 	adds.w	r3, r9, r9
 80044d6:	eb4a 040a 	adc.w	r4, sl, sl
 80044da:	4699      	mov	r9, r3
 80044dc:	46a2      	mov	sl, r4
 80044de:	eb19 090b 	adds.w	r9, r9, fp
 80044e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044fa:	4689      	mov	r9, r1
 80044fc:	4692      	mov	sl, r2
 80044fe:	eb1b 0509 	adds.w	r5, fp, r9
 8004502:	eb4c 060a 	adc.w	r6, ip, sl
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4619      	mov	r1, r3
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	0094      	lsls	r4, r2, #2
 800451a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	461a      	mov	r2, r3
 8004522:	4623      	mov	r3, r4
 8004524:	4628      	mov	r0, r5
 8004526:	4631      	mov	r1, r6
 8004528:	f7fc fb96 	bl	8000c58 <__aeabi_uldivmod>
 800452c:	4603      	mov	r3, r0
 800452e:	460c      	mov	r4, r1
 8004530:	461a      	mov	r2, r3
 8004532:	4b77      	ldr	r3, [pc, #476]	; (8004710 <UART_SetConfig+0x6f4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	; 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a72      	ldr	r2, [pc, #456]	; (8004710 <UART_SetConfig+0x6f4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4442      	add	r2, r8
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	e0d0      	b.n	80046fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800455c:	f7ff f978 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8004560:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	469a      	mov	sl, r3
 8004566:	f04f 0b00 	mov.w	fp, #0
 800456a:	46d0      	mov	r8, sl
 800456c:	46d9      	mov	r9, fp
 800456e:	eb18 0308 	adds.w	r3, r8, r8
 8004572:	eb49 0409 	adc.w	r4, r9, r9
 8004576:	4698      	mov	r8, r3
 8004578:	46a1      	mov	r9, r4
 800457a:	eb18 080a 	adds.w	r8, r8, sl
 800457e:	eb49 090b 	adc.w	r9, r9, fp
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800458e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004592:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004596:	4688      	mov	r8, r1
 8004598:	4691      	mov	r9, r2
 800459a:	eb1a 0508 	adds.w	r5, sl, r8
 800459e:	eb4b 0609 	adc.w	r6, fp, r9
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4619      	mov	r1, r3
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	f04f 0400 	mov.w	r4, #0
 80045b4:	0094      	lsls	r4, r2, #2
 80045b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045ba:	008b      	lsls	r3, r1, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	4628      	mov	r0, r5
 80045c2:	4631      	mov	r1, r6
 80045c4:	f7fc fb48 	bl	8000c58 <__aeabi_uldivmod>
 80045c8:	4603      	mov	r3, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b50      	ldr	r3, [pc, #320]	; (8004710 <UART_SetConfig+0x6f4>)
 80045d0:	fba3 2302 	umull	r2, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	469b      	mov	fp, r3
 80045de:	f04f 0c00 	mov.w	ip, #0
 80045e2:	46d9      	mov	r9, fp
 80045e4:	46e2      	mov	sl, ip
 80045e6:	eb19 0309 	adds.w	r3, r9, r9
 80045ea:	eb4a 040a 	adc.w	r4, sl, sl
 80045ee:	4699      	mov	r9, r3
 80045f0:	46a2      	mov	sl, r4
 80045f2:	eb19 090b 	adds.w	r9, r9, fp
 80045f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800460a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460e:	4689      	mov	r9, r1
 8004610:	4692      	mov	sl, r2
 8004612:	eb1b 0509 	adds.w	r5, fp, r9
 8004616:	eb4c 060a 	adc.w	r6, ip, sl
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4619      	mov	r1, r3
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	0094      	lsls	r4, r2, #2
 800462e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004632:	008b      	lsls	r3, r1, #2
 8004634:	461a      	mov	r2, r3
 8004636:	4623      	mov	r3, r4
 8004638:	4628      	mov	r0, r5
 800463a:	4631      	mov	r1, r6
 800463c:	f7fc fb0c 	bl	8000c58 <__aeabi_uldivmod>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	461a      	mov	r2, r3
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <UART_SetConfig+0x6f4>)
 8004648:	fba3 1302 	umull	r1, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	2164      	movs	r1, #100	; 0x64
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	3332      	adds	r3, #50	; 0x32
 800465a:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <UART_SetConfig+0x6f4>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004666:	4498      	add	r8, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	469b      	mov	fp, r3
 800466c:	f04f 0c00 	mov.w	ip, #0
 8004670:	46d9      	mov	r9, fp
 8004672:	46e2      	mov	sl, ip
 8004674:	eb19 0309 	adds.w	r3, r9, r9
 8004678:	eb4a 040a 	adc.w	r4, sl, sl
 800467c:	4699      	mov	r9, r3
 800467e:	46a2      	mov	sl, r4
 8004680:	eb19 090b 	adds.w	r9, r9, fp
 8004684:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004694:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004698:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800469c:	4689      	mov	r9, r1
 800469e:	4692      	mov	sl, r2
 80046a0:	eb1b 0509 	adds.w	r5, fp, r9
 80046a4:	eb4c 060a 	adc.w	r6, ip, sl
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4619      	mov	r1, r3
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	0094      	lsls	r4, r2, #2
 80046bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046c0:	008b      	lsls	r3, r1, #2
 80046c2:	461a      	mov	r2, r3
 80046c4:	4623      	mov	r3, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	4631      	mov	r1, r6
 80046ca:	f7fc fac5 	bl	8000c58 <__aeabi_uldivmod>
 80046ce:	4603      	mov	r3, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <UART_SetConfig+0x6f4>)
 80046d6:	fba3 1302 	umull	r1, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2164      	movs	r1, #100	; 0x64
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	3332      	adds	r3, #50	; 0x32
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <UART_SetConfig+0x6f4>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 020f 	and.w	r2, r3, #15
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4442      	add	r2, r8
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	e7ff      	b.n	80046fe <UART_SetConfig+0x6e2>
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004708:	40011000 	.word	0x40011000
 800470c:	40011400 	.word	0x40011400
 8004710:	51eb851f 	.word	0x51eb851f

08004714 <__errno>:
 8004714:	4b01      	ldr	r3, [pc, #4]	; (800471c <__errno+0x8>)
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	2000000c 	.word	0x2000000c

08004720 <__libc_init_array>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	4e0d      	ldr	r6, [pc, #52]	; (8004758 <__libc_init_array+0x38>)
 8004724:	4c0d      	ldr	r4, [pc, #52]	; (800475c <__libc_init_array+0x3c>)
 8004726:	1ba4      	subs	r4, r4, r6
 8004728:	10a4      	asrs	r4, r4, #2
 800472a:	2500      	movs	r5, #0
 800472c:	42a5      	cmp	r5, r4
 800472e:	d109      	bne.n	8004744 <__libc_init_array+0x24>
 8004730:	4e0b      	ldr	r6, [pc, #44]	; (8004760 <__libc_init_array+0x40>)
 8004732:	4c0c      	ldr	r4, [pc, #48]	; (8004764 <__libc_init_array+0x44>)
 8004734:	f002 f870 	bl	8006818 <_init>
 8004738:	1ba4      	subs	r4, r4, r6
 800473a:	10a4      	asrs	r4, r4, #2
 800473c:	2500      	movs	r5, #0
 800473e:	42a5      	cmp	r5, r4
 8004740:	d105      	bne.n	800474e <__libc_init_array+0x2e>
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004748:	4798      	blx	r3
 800474a:	3501      	adds	r5, #1
 800474c:	e7ee      	b.n	800472c <__libc_init_array+0xc>
 800474e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004752:	4798      	blx	r3
 8004754:	3501      	adds	r5, #1
 8004756:	e7f2      	b.n	800473e <__libc_init_array+0x1e>
 8004758:	08006ae0 	.word	0x08006ae0
 800475c:	08006ae0 	.word	0x08006ae0
 8004760:	08006ae0 	.word	0x08006ae0
 8004764:	08006ae4 	.word	0x08006ae4

08004768 <memset>:
 8004768:	4402      	add	r2, r0
 800476a:	4603      	mov	r3, r0
 800476c:	4293      	cmp	r3, r2
 800476e:	d100      	bne.n	8004772 <memset+0xa>
 8004770:	4770      	bx	lr
 8004772:	f803 1b01 	strb.w	r1, [r3], #1
 8004776:	e7f9      	b.n	800476c <memset+0x4>

08004778 <__cvt>:
 8004778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	ec55 4b10 	vmov	r4, r5, d0
 8004780:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004782:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004786:	2d00      	cmp	r5, #0
 8004788:	460e      	mov	r6, r1
 800478a:	4691      	mov	r9, r2
 800478c:	4619      	mov	r1, r3
 800478e:	bfb8      	it	lt
 8004790:	4622      	movlt	r2, r4
 8004792:	462b      	mov	r3, r5
 8004794:	f027 0720 	bic.w	r7, r7, #32
 8004798:	bfbb      	ittet	lt
 800479a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800479e:	461d      	movlt	r5, r3
 80047a0:	2300      	movge	r3, #0
 80047a2:	232d      	movlt	r3, #45	; 0x2d
 80047a4:	bfb8      	it	lt
 80047a6:	4614      	movlt	r4, r2
 80047a8:	2f46      	cmp	r7, #70	; 0x46
 80047aa:	700b      	strb	r3, [r1, #0]
 80047ac:	d004      	beq.n	80047b8 <__cvt+0x40>
 80047ae:	2f45      	cmp	r7, #69	; 0x45
 80047b0:	d100      	bne.n	80047b4 <__cvt+0x3c>
 80047b2:	3601      	adds	r6, #1
 80047b4:	2102      	movs	r1, #2
 80047b6:	e000      	b.n	80047ba <__cvt+0x42>
 80047b8:	2103      	movs	r1, #3
 80047ba:	ab03      	add	r3, sp, #12
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	ab02      	add	r3, sp, #8
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	4632      	mov	r2, r6
 80047c4:	4653      	mov	r3, sl
 80047c6:	ec45 4b10 	vmov	d0, r4, r5
 80047ca:	f000 fcf1 	bl	80051b0 <_dtoa_r>
 80047ce:	2f47      	cmp	r7, #71	; 0x47
 80047d0:	4680      	mov	r8, r0
 80047d2:	d102      	bne.n	80047da <__cvt+0x62>
 80047d4:	f019 0f01 	tst.w	r9, #1
 80047d8:	d026      	beq.n	8004828 <__cvt+0xb0>
 80047da:	2f46      	cmp	r7, #70	; 0x46
 80047dc:	eb08 0906 	add.w	r9, r8, r6
 80047e0:	d111      	bne.n	8004806 <__cvt+0x8e>
 80047e2:	f898 3000 	ldrb.w	r3, [r8]
 80047e6:	2b30      	cmp	r3, #48	; 0x30
 80047e8:	d10a      	bne.n	8004800 <__cvt+0x88>
 80047ea:	2200      	movs	r2, #0
 80047ec:	2300      	movs	r3, #0
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fc f971 	bl	8000ad8 <__aeabi_dcmpeq>
 80047f6:	b918      	cbnz	r0, 8004800 <__cvt+0x88>
 80047f8:	f1c6 0601 	rsb	r6, r6, #1
 80047fc:	f8ca 6000 	str.w	r6, [sl]
 8004800:	f8da 3000 	ldr.w	r3, [sl]
 8004804:	4499      	add	r9, r3
 8004806:	2200      	movs	r2, #0
 8004808:	2300      	movs	r3, #0
 800480a:	4620      	mov	r0, r4
 800480c:	4629      	mov	r1, r5
 800480e:	f7fc f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8004812:	b938      	cbnz	r0, 8004824 <__cvt+0xac>
 8004814:	2230      	movs	r2, #48	; 0x30
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	454b      	cmp	r3, r9
 800481a:	d205      	bcs.n	8004828 <__cvt+0xb0>
 800481c:	1c59      	adds	r1, r3, #1
 800481e:	9103      	str	r1, [sp, #12]
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e7f8      	b.n	8004816 <__cvt+0x9e>
 8004824:	f8cd 900c 	str.w	r9, [sp, #12]
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800482c:	eba3 0308 	sub.w	r3, r3, r8
 8004830:	4640      	mov	r0, r8
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	b004      	add	sp, #16
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800483a <__exponent>:
 800483a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800483c:	2900      	cmp	r1, #0
 800483e:	4604      	mov	r4, r0
 8004840:	bfba      	itte	lt
 8004842:	4249      	neglt	r1, r1
 8004844:	232d      	movlt	r3, #45	; 0x2d
 8004846:	232b      	movge	r3, #43	; 0x2b
 8004848:	2909      	cmp	r1, #9
 800484a:	f804 2b02 	strb.w	r2, [r4], #2
 800484e:	7043      	strb	r3, [r0, #1]
 8004850:	dd20      	ble.n	8004894 <__exponent+0x5a>
 8004852:	f10d 0307 	add.w	r3, sp, #7
 8004856:	461f      	mov	r7, r3
 8004858:	260a      	movs	r6, #10
 800485a:	fb91 f5f6 	sdiv	r5, r1, r6
 800485e:	fb06 1115 	mls	r1, r6, r5, r1
 8004862:	3130      	adds	r1, #48	; 0x30
 8004864:	2d09      	cmp	r5, #9
 8004866:	f803 1c01 	strb.w	r1, [r3, #-1]
 800486a:	f103 32ff 	add.w	r2, r3, #4294967295
 800486e:	4629      	mov	r1, r5
 8004870:	dc09      	bgt.n	8004886 <__exponent+0x4c>
 8004872:	3130      	adds	r1, #48	; 0x30
 8004874:	3b02      	subs	r3, #2
 8004876:	f802 1c01 	strb.w	r1, [r2, #-1]
 800487a:	42bb      	cmp	r3, r7
 800487c:	4622      	mov	r2, r4
 800487e:	d304      	bcc.n	800488a <__exponent+0x50>
 8004880:	1a10      	subs	r0, r2, r0
 8004882:	b003      	add	sp, #12
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004886:	4613      	mov	r3, r2
 8004888:	e7e7      	b.n	800485a <__exponent+0x20>
 800488a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800488e:	f804 2b01 	strb.w	r2, [r4], #1
 8004892:	e7f2      	b.n	800487a <__exponent+0x40>
 8004894:	2330      	movs	r3, #48	; 0x30
 8004896:	4419      	add	r1, r3
 8004898:	7083      	strb	r3, [r0, #2]
 800489a:	1d02      	adds	r2, r0, #4
 800489c:	70c1      	strb	r1, [r0, #3]
 800489e:	e7ef      	b.n	8004880 <__exponent+0x46>

080048a0 <_printf_float>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	b08d      	sub	sp, #52	; 0x34
 80048a6:	460c      	mov	r4, r1
 80048a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80048ac:	4616      	mov	r6, r2
 80048ae:	461f      	mov	r7, r3
 80048b0:	4605      	mov	r5, r0
 80048b2:	f001 fa35 	bl	8005d20 <_localeconv_r>
 80048b6:	6803      	ldr	r3, [r0, #0]
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fb fc90 	bl	80001e0 <strlen>
 80048c0:	2300      	movs	r3, #0
 80048c2:	930a      	str	r3, [sp, #40]	; 0x28
 80048c4:	f8d8 3000 	ldr.w	r3, [r8]
 80048c8:	9005      	str	r0, [sp, #20]
 80048ca:	3307      	adds	r3, #7
 80048cc:	f023 0307 	bic.w	r3, r3, #7
 80048d0:	f103 0208 	add.w	r2, r3, #8
 80048d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048d8:	f8d4 b000 	ldr.w	fp, [r4]
 80048dc:	f8c8 2000 	str.w	r2, [r8]
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048f0:	9307      	str	r3, [sp, #28]
 80048f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295
 80048fa:	4ba7      	ldr	r3, [pc, #668]	; (8004b98 <_printf_float+0x2f8>)
 80048fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004900:	f7fc f91c 	bl	8000b3c <__aeabi_dcmpun>
 8004904:	bb70      	cbnz	r0, 8004964 <_printf_float+0xc4>
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	4ba3      	ldr	r3, [pc, #652]	; (8004b98 <_printf_float+0x2f8>)
 800490c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004910:	f7fc f8f6 	bl	8000b00 <__aeabi_dcmple>
 8004914:	bb30      	cbnz	r0, 8004964 <_printf_float+0xc4>
 8004916:	2200      	movs	r2, #0
 8004918:	2300      	movs	r3, #0
 800491a:	4640      	mov	r0, r8
 800491c:	4649      	mov	r1, r9
 800491e:	f7fc f8e5 	bl	8000aec <__aeabi_dcmplt>
 8004922:	b110      	cbz	r0, 800492a <_printf_float+0x8a>
 8004924:	232d      	movs	r3, #45	; 0x2d
 8004926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800492a:	4a9c      	ldr	r2, [pc, #624]	; (8004b9c <_printf_float+0x2fc>)
 800492c:	4b9c      	ldr	r3, [pc, #624]	; (8004ba0 <_printf_float+0x300>)
 800492e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004932:	bf8c      	ite	hi
 8004934:	4690      	movhi	r8, r2
 8004936:	4698      	movls	r8, r3
 8004938:	2303      	movs	r3, #3
 800493a:	f02b 0204 	bic.w	r2, fp, #4
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	6022      	str	r2, [r4, #0]
 8004942:	f04f 0900 	mov.w	r9, #0
 8004946:	9700      	str	r7, [sp, #0]
 8004948:	4633      	mov	r3, r6
 800494a:	aa0b      	add	r2, sp, #44	; 0x2c
 800494c:	4621      	mov	r1, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f000 f9e6 	bl	8004d20 <_printf_common>
 8004954:	3001      	adds	r0, #1
 8004956:	f040 808d 	bne.w	8004a74 <_printf_float+0x1d4>
 800495a:	f04f 30ff 	mov.w	r0, #4294967295
 800495e:	b00d      	add	sp, #52	; 0x34
 8004960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fc f8e6 	bl	8000b3c <__aeabi_dcmpun>
 8004970:	b110      	cbz	r0, 8004978 <_printf_float+0xd8>
 8004972:	4a8c      	ldr	r2, [pc, #560]	; (8004ba4 <_printf_float+0x304>)
 8004974:	4b8c      	ldr	r3, [pc, #560]	; (8004ba8 <_printf_float+0x308>)
 8004976:	e7da      	b.n	800492e <_printf_float+0x8e>
 8004978:	6861      	ldr	r1, [r4, #4]
 800497a:	1c4b      	adds	r3, r1, #1
 800497c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004980:	a80a      	add	r0, sp, #40	; 0x28
 8004982:	d13e      	bne.n	8004a02 <_printf_float+0x162>
 8004984:	2306      	movs	r3, #6
 8004986:	6063      	str	r3, [r4, #4]
 8004988:	2300      	movs	r3, #0
 800498a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800498e:	ab09      	add	r3, sp, #36	; 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	ec49 8b10 	vmov	d0, r8, r9
 8004996:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	f8cd a004 	str.w	sl, [sp, #4]
 80049a0:	6861      	ldr	r1, [r4, #4]
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7ff fee8 	bl	8004778 <__cvt>
 80049a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80049ac:	2b47      	cmp	r3, #71	; 0x47
 80049ae:	4680      	mov	r8, r0
 80049b0:	d109      	bne.n	80049c6 <_printf_float+0x126>
 80049b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b4:	1cd8      	adds	r0, r3, #3
 80049b6:	db02      	blt.n	80049be <_printf_float+0x11e>
 80049b8:	6862      	ldr	r2, [r4, #4]
 80049ba:	4293      	cmp	r3, r2
 80049bc:	dd47      	ble.n	8004a4e <_printf_float+0x1ae>
 80049be:	f1aa 0a02 	sub.w	sl, sl, #2
 80049c2:	fa5f fa8a 	uxtb.w	sl, sl
 80049c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80049ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049cc:	d824      	bhi.n	8004a18 <_printf_float+0x178>
 80049ce:	3901      	subs	r1, #1
 80049d0:	4652      	mov	r2, sl
 80049d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049d6:	9109      	str	r1, [sp, #36]	; 0x24
 80049d8:	f7ff ff2f 	bl	800483a <__exponent>
 80049dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049de:	1813      	adds	r3, r2, r0
 80049e0:	2a01      	cmp	r2, #1
 80049e2:	4681      	mov	r9, r0
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	dc02      	bgt.n	80049ee <_printf_float+0x14e>
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	07d1      	lsls	r1, r2, #31
 80049ec:	d501      	bpl.n	80049f2 <_printf_float+0x152>
 80049ee:	3301      	adds	r3, #1
 80049f0:	6123      	str	r3, [r4, #16]
 80049f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0a5      	beq.n	8004946 <_printf_float+0xa6>
 80049fa:	232d      	movs	r3, #45	; 0x2d
 80049fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a00:	e7a1      	b.n	8004946 <_printf_float+0xa6>
 8004a02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004a06:	f000 8177 	beq.w	8004cf8 <_printf_float+0x458>
 8004a0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a0e:	d1bb      	bne.n	8004988 <_printf_float+0xe8>
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d1b9      	bne.n	8004988 <_printf_float+0xe8>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e7b6      	b.n	8004986 <_printf_float+0xe6>
 8004a18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004a1c:	d119      	bne.n	8004a52 <_printf_float+0x1b2>
 8004a1e:	2900      	cmp	r1, #0
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	dd0c      	ble.n	8004a3e <_printf_float+0x19e>
 8004a24:	6121      	str	r1, [r4, #16]
 8004a26:	b913      	cbnz	r3, 8004a2e <_printf_float+0x18e>
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	07d2      	lsls	r2, r2, #31
 8004a2c:	d502      	bpl.n	8004a34 <_printf_float+0x194>
 8004a2e:	3301      	adds	r3, #1
 8004a30:	440b      	add	r3, r1
 8004a32:	6123      	str	r3, [r4, #16]
 8004a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a36:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a38:	f04f 0900 	mov.w	r9, #0
 8004a3c:	e7d9      	b.n	80049f2 <_printf_float+0x152>
 8004a3e:	b913      	cbnz	r3, 8004a46 <_printf_float+0x1a6>
 8004a40:	6822      	ldr	r2, [r4, #0]
 8004a42:	07d0      	lsls	r0, r2, #31
 8004a44:	d501      	bpl.n	8004a4a <_printf_float+0x1aa>
 8004a46:	3302      	adds	r3, #2
 8004a48:	e7f3      	b.n	8004a32 <_printf_float+0x192>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e7f1      	b.n	8004a32 <_printf_float+0x192>
 8004a4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004a52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a56:	4293      	cmp	r3, r2
 8004a58:	db05      	blt.n	8004a66 <_printf_float+0x1c6>
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	07d1      	lsls	r1, r2, #31
 8004a60:	d5e8      	bpl.n	8004a34 <_printf_float+0x194>
 8004a62:	3301      	adds	r3, #1
 8004a64:	e7e5      	b.n	8004a32 <_printf_float+0x192>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfd4      	ite	le
 8004a6a:	f1c3 0302 	rsble	r3, r3, #2
 8004a6e:	2301      	movgt	r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	e7de      	b.n	8004a32 <_printf_float+0x192>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	055a      	lsls	r2, r3, #21
 8004a78:	d407      	bmi.n	8004a8a <_printf_float+0x1ea>
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b8      	blx	r7
 8004a84:	3001      	adds	r0, #1
 8004a86:	d12b      	bne.n	8004ae0 <_printf_float+0x240>
 8004a88:	e767      	b.n	800495a <_printf_float+0xba>
 8004a8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a8e:	f240 80dc 	bls.w	8004c4a <_printf_float+0x3aa>
 8004a92:	2200      	movs	r2, #0
 8004a94:	2300      	movs	r3, #0
 8004a96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a9a:	f7fc f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d033      	beq.n	8004b0a <_printf_float+0x26a>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4a41      	ldr	r2, [pc, #260]	; (8004bac <_printf_float+0x30c>)
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	f43f af54 	beq.w	800495a <_printf_float+0xba>
 8004ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	db02      	blt.n	8004ac0 <_printf_float+0x220>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	07d8      	lsls	r0, r3, #31
 8004abe:	d50f      	bpl.n	8004ae0 <_printf_float+0x240>
 8004ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	f43f af45 	beq.w	800495a <_printf_float+0xba>
 8004ad0:	f04f 0800 	mov.w	r8, #0
 8004ad4:	f104 091a 	add.w	r9, r4, #26
 8004ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ada:	3b01      	subs	r3, #1
 8004adc:	4543      	cmp	r3, r8
 8004ade:	dc09      	bgt.n	8004af4 <_printf_float+0x254>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	079b      	lsls	r3, r3, #30
 8004ae4:	f100 8103 	bmi.w	8004cee <_printf_float+0x44e>
 8004ae8:	68e0      	ldr	r0, [r4, #12]
 8004aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aec:	4298      	cmp	r0, r3
 8004aee:	bfb8      	it	lt
 8004af0:	4618      	movlt	r0, r3
 8004af2:	e734      	b.n	800495e <_printf_float+0xbe>
 8004af4:	2301      	movs	r3, #1
 8004af6:	464a      	mov	r2, r9
 8004af8:	4631      	mov	r1, r6
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	f43f af2b 	beq.w	800495a <_printf_float+0xba>
 8004b04:	f108 0801 	add.w	r8, r8, #1
 8004b08:	e7e6      	b.n	8004ad8 <_printf_float+0x238>
 8004b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dc2b      	bgt.n	8004b68 <_printf_float+0x2c8>
 8004b10:	2301      	movs	r3, #1
 8004b12:	4a26      	ldr	r2, [pc, #152]	; (8004bac <_printf_float+0x30c>)
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f43f af1d 	beq.w	800495a <_printf_float+0xba>
 8004b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b22:	b923      	cbnz	r3, 8004b2e <_printf_float+0x28e>
 8004b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b26:	b913      	cbnz	r3, 8004b2e <_printf_float+0x28e>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	07d9      	lsls	r1, r3, #31
 8004b2c:	d5d8      	bpl.n	8004ae0 <_printf_float+0x240>
 8004b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f43f af0e 	beq.w	800495a <_printf_float+0xba>
 8004b3e:	f04f 0900 	mov.w	r9, #0
 8004b42:	f104 0a1a 	add.w	sl, r4, #26
 8004b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b48:	425b      	negs	r3, r3
 8004b4a:	454b      	cmp	r3, r9
 8004b4c:	dc01      	bgt.n	8004b52 <_printf_float+0x2b2>
 8004b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b50:	e794      	b.n	8004a7c <_printf_float+0x1dc>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4652      	mov	r2, sl
 8004b56:	4631      	mov	r1, r6
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f43f aefc 	beq.w	800495a <_printf_float+0xba>
 8004b62:	f109 0901 	add.w	r9, r9, #1
 8004b66:	e7ee      	b.n	8004b46 <_printf_float+0x2a6>
 8004b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	bfa8      	it	ge
 8004b70:	461a      	movge	r2, r3
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	4691      	mov	r9, r2
 8004b76:	dd07      	ble.n	8004b88 <_printf_float+0x2e8>
 8004b78:	4613      	mov	r3, r2
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	4628      	mov	r0, r5
 8004b80:	47b8      	blx	r7
 8004b82:	3001      	adds	r0, #1
 8004b84:	f43f aee9 	beq.w	800495a <_printf_float+0xba>
 8004b88:	f104 031a 	add.w	r3, r4, #26
 8004b8c:	f04f 0b00 	mov.w	fp, #0
 8004b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b94:	9306      	str	r3, [sp, #24]
 8004b96:	e015      	b.n	8004bc4 <_printf_float+0x324>
 8004b98:	7fefffff 	.word	0x7fefffff
 8004b9c:	08006880 	.word	0x08006880
 8004ba0:	0800687c 	.word	0x0800687c
 8004ba4:	08006888 	.word	0x08006888
 8004ba8:	08006884 	.word	0x08006884
 8004bac:	0800688c 	.word	0x0800688c
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	9a06      	ldr	r2, [sp, #24]
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	47b8      	blx	r7
 8004bba:	3001      	adds	r0, #1
 8004bbc:	f43f aecd 	beq.w	800495a <_printf_float+0xba>
 8004bc0:	f10b 0b01 	add.w	fp, fp, #1
 8004bc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004bc8:	ebaa 0309 	sub.w	r3, sl, r9
 8004bcc:	455b      	cmp	r3, fp
 8004bce:	dcef      	bgt.n	8004bb0 <_printf_float+0x310>
 8004bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	44d0      	add	r8, sl
 8004bd8:	db15      	blt.n	8004c06 <_printf_float+0x366>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	07da      	lsls	r2, r3, #31
 8004bde:	d412      	bmi.n	8004c06 <_printf_float+0x366>
 8004be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004be4:	eba3 020a 	sub.w	r2, r3, sl
 8004be8:	eba3 0a01 	sub.w	sl, r3, r1
 8004bec:	4592      	cmp	sl, r2
 8004bee:	bfa8      	it	ge
 8004bf0:	4692      	movge	sl, r2
 8004bf2:	f1ba 0f00 	cmp.w	sl, #0
 8004bf6:	dc0e      	bgt.n	8004c16 <_printf_float+0x376>
 8004bf8:	f04f 0800 	mov.w	r8, #0
 8004bfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c00:	f104 091a 	add.w	r9, r4, #26
 8004c04:	e019      	b.n	8004c3a <_printf_float+0x39a>
 8004c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	d1e5      	bne.n	8004be0 <_printf_float+0x340>
 8004c14:	e6a1      	b.n	800495a <_printf_float+0xba>
 8004c16:	4653      	mov	r3, sl
 8004c18:	4642      	mov	r2, r8
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	47b8      	blx	r7
 8004c20:	3001      	adds	r0, #1
 8004c22:	d1e9      	bne.n	8004bf8 <_printf_float+0x358>
 8004c24:	e699      	b.n	800495a <_printf_float+0xba>
 8004c26:	2301      	movs	r3, #1
 8004c28:	464a      	mov	r2, r9
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	f43f ae92 	beq.w	800495a <_printf_float+0xba>
 8004c36:	f108 0801 	add.w	r8, r8, #1
 8004c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	eba3 030a 	sub.w	r3, r3, sl
 8004c44:	4543      	cmp	r3, r8
 8004c46:	dcee      	bgt.n	8004c26 <_printf_float+0x386>
 8004c48:	e74a      	b.n	8004ae0 <_printf_float+0x240>
 8004c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c4c:	2a01      	cmp	r2, #1
 8004c4e:	dc01      	bgt.n	8004c54 <_printf_float+0x3b4>
 8004c50:	07db      	lsls	r3, r3, #31
 8004c52:	d53a      	bpl.n	8004cca <_printf_float+0x42a>
 8004c54:	2301      	movs	r3, #1
 8004c56:	4642      	mov	r2, r8
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f ae7b 	beq.w	800495a <_printf_float+0xba>
 8004c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f108 0801 	add.w	r8, r8, #1
 8004c74:	f43f ae71 	beq.w	800495a <_printf_float+0xba>
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c84:	2300      	movs	r3, #0
 8004c86:	f7fb ff27 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c8a:	b9c8      	cbnz	r0, 8004cc0 <_printf_float+0x420>
 8004c8c:	4653      	mov	r3, sl
 8004c8e:	4642      	mov	r2, r8
 8004c90:	4631      	mov	r1, r6
 8004c92:	4628      	mov	r0, r5
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	d10e      	bne.n	8004cb8 <_printf_float+0x418>
 8004c9a:	e65e      	b.n	800495a <_printf_float+0xba>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4652      	mov	r2, sl
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f ae57 	beq.w	800495a <_printf_float+0xba>
 8004cac:	f108 0801 	add.w	r8, r8, #1
 8004cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	4543      	cmp	r3, r8
 8004cb6:	dcf1      	bgt.n	8004c9c <_printf_float+0x3fc>
 8004cb8:	464b      	mov	r3, r9
 8004cba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cbe:	e6de      	b.n	8004a7e <_printf_float+0x1de>
 8004cc0:	f04f 0800 	mov.w	r8, #0
 8004cc4:	f104 0a1a 	add.w	sl, r4, #26
 8004cc8:	e7f2      	b.n	8004cb0 <_printf_float+0x410>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e7df      	b.n	8004c8e <_printf_float+0x3ee>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	464a      	mov	r2, r9
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f ae3e 	beq.w	800495a <_printf_float+0xba>
 8004cde:	f108 0801 	add.w	r8, r8, #1
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	4543      	cmp	r3, r8
 8004cea:	dcf0      	bgt.n	8004cce <_printf_float+0x42e>
 8004cec:	e6fc      	b.n	8004ae8 <_printf_float+0x248>
 8004cee:	f04f 0800 	mov.w	r8, #0
 8004cf2:	f104 0919 	add.w	r9, r4, #25
 8004cf6:	e7f4      	b.n	8004ce2 <_printf_float+0x442>
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	f43f ae8b 	beq.w	8004a14 <_printf_float+0x174>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d04:	ab09      	add	r3, sp, #36	; 0x24
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	ec49 8b10 	vmov	d0, r8, r9
 8004d0c:	6022      	str	r2, [r4, #0]
 8004d0e:	f8cd a004 	str.w	sl, [sp, #4]
 8004d12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d16:	4628      	mov	r0, r5
 8004d18:	f7ff fd2e 	bl	8004778 <__cvt>
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	e648      	b.n	80049b2 <_printf_float+0x112>

08004d20 <_printf_common>:
 8004d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	4691      	mov	r9, r2
 8004d26:	461f      	mov	r7, r3
 8004d28:	688a      	ldr	r2, [r1, #8]
 8004d2a:	690b      	ldr	r3, [r1, #16]
 8004d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	bfb8      	it	lt
 8004d34:	4613      	movlt	r3, r2
 8004d36:	f8c9 3000 	str.w	r3, [r9]
 8004d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d3e:	4606      	mov	r6, r0
 8004d40:	460c      	mov	r4, r1
 8004d42:	b112      	cbz	r2, 8004d4a <_printf_common+0x2a>
 8004d44:	3301      	adds	r3, #1
 8004d46:	f8c9 3000 	str.w	r3, [r9]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	0699      	lsls	r1, r3, #26
 8004d4e:	bf42      	ittt	mi
 8004d50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d54:	3302      	addmi	r3, #2
 8004d56:	f8c9 3000 	strmi.w	r3, [r9]
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	f015 0506 	ands.w	r5, r5, #6
 8004d60:	d107      	bne.n	8004d72 <_printf_common+0x52>
 8004d62:	f104 0a19 	add.w	sl, r4, #25
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	f8d9 2000 	ldr.w	r2, [r9]
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	42ab      	cmp	r3, r5
 8004d70:	dc28      	bgt.n	8004dc4 <_printf_common+0xa4>
 8004d72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	3300      	adds	r3, #0
 8004d7a:	bf18      	it	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	0692      	lsls	r2, r2, #26
 8004d80:	d42d      	bmi.n	8004dde <_printf_common+0xbe>
 8004d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d86:	4639      	mov	r1, r7
 8004d88:	4630      	mov	r0, r6
 8004d8a:	47c0      	blx	r8
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d020      	beq.n	8004dd2 <_printf_common+0xb2>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	68e5      	ldr	r5, [r4, #12]
 8004d94:	f8d9 2000 	ldr.w	r2, [r9]
 8004d98:	f003 0306 	and.w	r3, r3, #6
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	bf08      	it	eq
 8004da0:	1aad      	subeq	r5, r5, r2
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	bf0c      	ite	eq
 8004da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dac:	2500      	movne	r5, #0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bfc4      	itt	gt
 8004db2:	1a9b      	subgt	r3, r3, r2
 8004db4:	18ed      	addgt	r5, r5, r3
 8004db6:	f04f 0900 	mov.w	r9, #0
 8004dba:	341a      	adds	r4, #26
 8004dbc:	454d      	cmp	r5, r9
 8004dbe:	d11a      	bne.n	8004df6 <_printf_common+0xd6>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	e008      	b.n	8004dd6 <_printf_common+0xb6>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4652      	mov	r2, sl
 8004dc8:	4639      	mov	r1, r7
 8004dca:	4630      	mov	r0, r6
 8004dcc:	47c0      	blx	r8
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d103      	bne.n	8004dda <_printf_common+0xba>
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dda:	3501      	adds	r5, #1
 8004ddc:	e7c3      	b.n	8004d66 <_printf_common+0x46>
 8004dde:	18e1      	adds	r1, r4, r3
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	2030      	movs	r0, #48	; 0x30
 8004de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de8:	4422      	add	r2, r4
 8004dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df2:	3302      	adds	r3, #2
 8004df4:	e7c5      	b.n	8004d82 <_printf_common+0x62>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4622      	mov	r2, r4
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	47c0      	blx	r8
 8004e00:	3001      	adds	r0, #1
 8004e02:	d0e6      	beq.n	8004dd2 <_printf_common+0xb2>
 8004e04:	f109 0901 	add.w	r9, r9, #1
 8004e08:	e7d8      	b.n	8004dbc <_printf_common+0x9c>
	...

08004e0c <_printf_i>:
 8004e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e14:	460c      	mov	r4, r1
 8004e16:	7e09      	ldrb	r1, [r1, #24]
 8004e18:	b085      	sub	sp, #20
 8004e1a:	296e      	cmp	r1, #110	; 0x6e
 8004e1c:	4617      	mov	r7, r2
 8004e1e:	4606      	mov	r6, r0
 8004e20:	4698      	mov	r8, r3
 8004e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e24:	f000 80b3 	beq.w	8004f8e <_printf_i+0x182>
 8004e28:	d822      	bhi.n	8004e70 <_printf_i+0x64>
 8004e2a:	2963      	cmp	r1, #99	; 0x63
 8004e2c:	d036      	beq.n	8004e9c <_printf_i+0x90>
 8004e2e:	d80a      	bhi.n	8004e46 <_printf_i+0x3a>
 8004e30:	2900      	cmp	r1, #0
 8004e32:	f000 80b9 	beq.w	8004fa8 <_printf_i+0x19c>
 8004e36:	2958      	cmp	r1, #88	; 0x58
 8004e38:	f000 8083 	beq.w	8004f42 <_printf_i+0x136>
 8004e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e44:	e032      	b.n	8004eac <_printf_i+0xa0>
 8004e46:	2964      	cmp	r1, #100	; 0x64
 8004e48:	d001      	beq.n	8004e4e <_printf_i+0x42>
 8004e4a:	2969      	cmp	r1, #105	; 0x69
 8004e4c:	d1f6      	bne.n	8004e3c <_printf_i+0x30>
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	0605      	lsls	r5, r0, #24
 8004e54:	f103 0104 	add.w	r1, r3, #4
 8004e58:	d52a      	bpl.n	8004eb0 <_printf_i+0xa4>
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da03      	bge.n	8004e6a <_printf_i+0x5e>
 8004e62:	222d      	movs	r2, #45	; 0x2d
 8004e64:	425b      	negs	r3, r3
 8004e66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e6a:	486f      	ldr	r0, [pc, #444]	; (8005028 <_printf_i+0x21c>)
 8004e6c:	220a      	movs	r2, #10
 8004e6e:	e039      	b.n	8004ee4 <_printf_i+0xd8>
 8004e70:	2973      	cmp	r1, #115	; 0x73
 8004e72:	f000 809d 	beq.w	8004fb0 <_printf_i+0x1a4>
 8004e76:	d808      	bhi.n	8004e8a <_printf_i+0x7e>
 8004e78:	296f      	cmp	r1, #111	; 0x6f
 8004e7a:	d020      	beq.n	8004ebe <_printf_i+0xb2>
 8004e7c:	2970      	cmp	r1, #112	; 0x70
 8004e7e:	d1dd      	bne.n	8004e3c <_printf_i+0x30>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	f043 0320 	orr.w	r3, r3, #32
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	e003      	b.n	8004e92 <_printf_i+0x86>
 8004e8a:	2975      	cmp	r1, #117	; 0x75
 8004e8c:	d017      	beq.n	8004ebe <_printf_i+0xb2>
 8004e8e:	2978      	cmp	r1, #120	; 0x78
 8004e90:	d1d4      	bne.n	8004e3c <_printf_i+0x30>
 8004e92:	2378      	movs	r3, #120	; 0x78
 8004e94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e98:	4864      	ldr	r0, [pc, #400]	; (800502c <_printf_i+0x220>)
 8004e9a:	e055      	b.n	8004f48 <_printf_i+0x13c>
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	1d19      	adds	r1, r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6011      	str	r1, [r2, #0]
 8004ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eac:	2301      	movs	r3, #1
 8004eae:	e08c      	b.n	8004fca <_printf_i+0x1be>
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6011      	str	r1, [r2, #0]
 8004eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eb8:	bf18      	it	ne
 8004eba:	b21b      	sxthne	r3, r3
 8004ebc:	e7cf      	b.n	8004e5e <_printf_i+0x52>
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	6825      	ldr	r5, [r4, #0]
 8004ec2:	1d18      	adds	r0, r3, #4
 8004ec4:	6010      	str	r0, [r2, #0]
 8004ec6:	0628      	lsls	r0, r5, #24
 8004ec8:	d501      	bpl.n	8004ece <_printf_i+0xc2>
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	e002      	b.n	8004ed4 <_printf_i+0xc8>
 8004ece:	0668      	lsls	r0, r5, #25
 8004ed0:	d5fb      	bpl.n	8004eca <_printf_i+0xbe>
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	4854      	ldr	r0, [pc, #336]	; (8005028 <_printf_i+0x21c>)
 8004ed6:	296f      	cmp	r1, #111	; 0x6f
 8004ed8:	bf14      	ite	ne
 8004eda:	220a      	movne	r2, #10
 8004edc:	2208      	moveq	r2, #8
 8004ede:	2100      	movs	r1, #0
 8004ee0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ee4:	6865      	ldr	r5, [r4, #4]
 8004ee6:	60a5      	str	r5, [r4, #8]
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	f2c0 8095 	blt.w	8005018 <_printf_i+0x20c>
 8004eee:	6821      	ldr	r1, [r4, #0]
 8004ef0:	f021 0104 	bic.w	r1, r1, #4
 8004ef4:	6021      	str	r1, [r4, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d13d      	bne.n	8004f76 <_printf_i+0x16a>
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	f040 808e 	bne.w	800501c <_printf_i+0x210>
 8004f00:	4665      	mov	r5, ip
 8004f02:	2a08      	cmp	r2, #8
 8004f04:	d10b      	bne.n	8004f1e <_printf_i+0x112>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	07db      	lsls	r3, r3, #31
 8004f0a:	d508      	bpl.n	8004f1e <_printf_i+0x112>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	bfde      	ittt	le
 8004f14:	2330      	movle	r3, #48	; 0x30
 8004f16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f1e:	ebac 0305 	sub.w	r3, ip, r5
 8004f22:	6123      	str	r3, [r4, #16]
 8004f24:	f8cd 8000 	str.w	r8, [sp]
 8004f28:	463b      	mov	r3, r7
 8004f2a:	aa03      	add	r2, sp, #12
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f7ff fef6 	bl	8004d20 <_printf_common>
 8004f34:	3001      	adds	r0, #1
 8004f36:	d14d      	bne.n	8004fd4 <_printf_i+0x1c8>
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	b005      	add	sp, #20
 8004f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f42:	4839      	ldr	r0, [pc, #228]	; (8005028 <_printf_i+0x21c>)
 8004f44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f48:	6813      	ldr	r3, [r2, #0]
 8004f4a:	6821      	ldr	r1, [r4, #0]
 8004f4c:	1d1d      	adds	r5, r3, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6015      	str	r5, [r2, #0]
 8004f52:	060a      	lsls	r2, r1, #24
 8004f54:	d50b      	bpl.n	8004f6e <_printf_i+0x162>
 8004f56:	07ca      	lsls	r2, r1, #31
 8004f58:	bf44      	itt	mi
 8004f5a:	f041 0120 	orrmi.w	r1, r1, #32
 8004f5e:	6021      	strmi	r1, [r4, #0]
 8004f60:	b91b      	cbnz	r3, 8004f6a <_printf_i+0x15e>
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	f022 0220 	bic.w	r2, r2, #32
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	e7b7      	b.n	8004ede <_printf_i+0xd2>
 8004f6e:	064d      	lsls	r5, r1, #25
 8004f70:	bf48      	it	mi
 8004f72:	b29b      	uxthmi	r3, r3
 8004f74:	e7ef      	b.n	8004f56 <_printf_i+0x14a>
 8004f76:	4665      	mov	r5, ip
 8004f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f7c:	fb02 3311 	mls	r3, r2, r1, r3
 8004f80:	5cc3      	ldrb	r3, [r0, r3]
 8004f82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f86:	460b      	mov	r3, r1
 8004f88:	2900      	cmp	r1, #0
 8004f8a:	d1f5      	bne.n	8004f78 <_printf_i+0x16c>
 8004f8c:	e7b9      	b.n	8004f02 <_printf_i+0xf6>
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	6825      	ldr	r5, [r4, #0]
 8004f92:	6961      	ldr	r1, [r4, #20]
 8004f94:	1d18      	adds	r0, r3, #4
 8004f96:	6010      	str	r0, [r2, #0]
 8004f98:	0628      	lsls	r0, r5, #24
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	d501      	bpl.n	8004fa2 <_printf_i+0x196>
 8004f9e:	6019      	str	r1, [r3, #0]
 8004fa0:	e002      	b.n	8004fa8 <_printf_i+0x19c>
 8004fa2:	066a      	lsls	r2, r5, #25
 8004fa4:	d5fb      	bpl.n	8004f9e <_printf_i+0x192>
 8004fa6:	8019      	strh	r1, [r3, #0]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	4665      	mov	r5, ip
 8004fae:	e7b9      	b.n	8004f24 <_printf_i+0x118>
 8004fb0:	6813      	ldr	r3, [r2, #0]
 8004fb2:	1d19      	adds	r1, r3, #4
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	681d      	ldr	r5, [r3, #0]
 8004fb8:	6862      	ldr	r2, [r4, #4]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f7fb f917 	bl	80001f0 <memchr>
 8004fc2:	b108      	cbz	r0, 8004fc8 <_printf_i+0x1bc>
 8004fc4:	1b40      	subs	r0, r0, r5
 8004fc6:	6060      	str	r0, [r4, #4]
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd2:	e7a7      	b.n	8004f24 <_printf_i+0x118>
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	462a      	mov	r2, r5
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4630      	mov	r0, r6
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0aa      	beq.n	8004f38 <_printf_i+0x12c>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	079b      	lsls	r3, r3, #30
 8004fe6:	d413      	bmi.n	8005010 <_printf_i+0x204>
 8004fe8:	68e0      	ldr	r0, [r4, #12]
 8004fea:	9b03      	ldr	r3, [sp, #12]
 8004fec:	4298      	cmp	r0, r3
 8004fee:	bfb8      	it	lt
 8004ff0:	4618      	movlt	r0, r3
 8004ff2:	e7a3      	b.n	8004f3c <_printf_i+0x130>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	464a      	mov	r2, r9
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d09a      	beq.n	8004f38 <_printf_i+0x12c>
 8005002:	3501      	adds	r5, #1
 8005004:	68e3      	ldr	r3, [r4, #12]
 8005006:	9a03      	ldr	r2, [sp, #12]
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	42ab      	cmp	r3, r5
 800500c:	dcf2      	bgt.n	8004ff4 <_printf_i+0x1e8>
 800500e:	e7eb      	b.n	8004fe8 <_printf_i+0x1dc>
 8005010:	2500      	movs	r5, #0
 8005012:	f104 0919 	add.w	r9, r4, #25
 8005016:	e7f5      	b.n	8005004 <_printf_i+0x1f8>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1ac      	bne.n	8004f76 <_printf_i+0x16a>
 800501c:	7803      	ldrb	r3, [r0, #0]
 800501e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005026:	e76c      	b.n	8004f02 <_printf_i+0xf6>
 8005028:	0800688e 	.word	0x0800688e
 800502c:	0800689f 	.word	0x0800689f

08005030 <sniprintf>:
 8005030:	b40c      	push	{r2, r3}
 8005032:	b530      	push	{r4, r5, lr}
 8005034:	4b17      	ldr	r3, [pc, #92]	; (8005094 <sniprintf+0x64>)
 8005036:	1e0c      	subs	r4, r1, #0
 8005038:	b09d      	sub	sp, #116	; 0x74
 800503a:	681d      	ldr	r5, [r3, #0]
 800503c:	da08      	bge.n	8005050 <sniprintf+0x20>
 800503e:	238b      	movs	r3, #139	; 0x8b
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	b01d      	add	sp, #116	; 0x74
 8005048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800504c:	b002      	add	sp, #8
 800504e:	4770      	bx	lr
 8005050:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005054:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005058:	bf14      	ite	ne
 800505a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800505e:	4623      	moveq	r3, r4
 8005060:	9304      	str	r3, [sp, #16]
 8005062:	9307      	str	r3, [sp, #28]
 8005064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005068:	9002      	str	r0, [sp, #8]
 800506a:	9006      	str	r0, [sp, #24]
 800506c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005070:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005072:	ab21      	add	r3, sp, #132	; 0x84
 8005074:	a902      	add	r1, sp, #8
 8005076:	4628      	mov	r0, r5
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	f001 fa5d 	bl	8006538 <_svfiprintf_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	bfbc      	itt	lt
 8005082:	238b      	movlt	r3, #139	; 0x8b
 8005084:	602b      	strlt	r3, [r5, #0]
 8005086:	2c00      	cmp	r4, #0
 8005088:	d0dd      	beq.n	8005046 <sniprintf+0x16>
 800508a:	9b02      	ldr	r3, [sp, #8]
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e7d9      	b.n	8005046 <sniprintf+0x16>
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c

08005098 <quorem>:
 8005098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	6903      	ldr	r3, [r0, #16]
 800509e:	690c      	ldr	r4, [r1, #16]
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	4680      	mov	r8, r0
 80050a4:	f2c0 8082 	blt.w	80051ac <quorem+0x114>
 80050a8:	3c01      	subs	r4, #1
 80050aa:	f101 0714 	add.w	r7, r1, #20
 80050ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80050b2:	f100 0614 	add.w	r6, r0, #20
 80050b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050be:	eb06 030c 	add.w	r3, r6, ip
 80050c2:	3501      	adds	r5, #1
 80050c4:	eb07 090c 	add.w	r9, r7, ip
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80050ce:	b395      	cbz	r5, 8005136 <quorem+0x9e>
 80050d0:	f04f 0a00 	mov.w	sl, #0
 80050d4:	4638      	mov	r0, r7
 80050d6:	46b6      	mov	lr, r6
 80050d8:	46d3      	mov	fp, sl
 80050da:	f850 2b04 	ldr.w	r2, [r0], #4
 80050de:	b293      	uxth	r3, r2
 80050e0:	fb05 a303 	mla	r3, r5, r3, sl
 80050e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	ebab 0303 	sub.w	r3, fp, r3
 80050ee:	0c12      	lsrs	r2, r2, #16
 80050f0:	f8de b000 	ldr.w	fp, [lr]
 80050f4:	fb05 a202 	mla	r2, r5, r2, sl
 80050f8:	fa13 f38b 	uxtah	r3, r3, fp
 80050fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005100:	fa1f fb82 	uxth.w	fp, r2
 8005104:	f8de 2000 	ldr.w	r2, [lr]
 8005108:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800510c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005110:	b29b      	uxth	r3, r3
 8005112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005116:	4581      	cmp	r9, r0
 8005118:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800511c:	f84e 3b04 	str.w	r3, [lr], #4
 8005120:	d2db      	bcs.n	80050da <quorem+0x42>
 8005122:	f856 300c 	ldr.w	r3, [r6, ip]
 8005126:	b933      	cbnz	r3, 8005136 <quorem+0x9e>
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	3b04      	subs	r3, #4
 800512c:	429e      	cmp	r6, r3
 800512e:	461a      	mov	r2, r3
 8005130:	d330      	bcc.n	8005194 <quorem+0xfc>
 8005132:	f8c8 4010 	str.w	r4, [r8, #16]
 8005136:	4640      	mov	r0, r8
 8005138:	f001 f828 	bl	800618c <__mcmp>
 800513c:	2800      	cmp	r0, #0
 800513e:	db25      	blt.n	800518c <quorem+0xf4>
 8005140:	3501      	adds	r5, #1
 8005142:	4630      	mov	r0, r6
 8005144:	f04f 0c00 	mov.w	ip, #0
 8005148:	f857 2b04 	ldr.w	r2, [r7], #4
 800514c:	f8d0 e000 	ldr.w	lr, [r0]
 8005150:	b293      	uxth	r3, r2
 8005152:	ebac 0303 	sub.w	r3, ip, r3
 8005156:	0c12      	lsrs	r2, r2, #16
 8005158:	fa13 f38e 	uxtah	r3, r3, lr
 800515c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005164:	b29b      	uxth	r3, r3
 8005166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800516a:	45b9      	cmp	r9, r7
 800516c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005170:	f840 3b04 	str.w	r3, [r0], #4
 8005174:	d2e8      	bcs.n	8005148 <quorem+0xb0>
 8005176:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800517a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800517e:	b92a      	cbnz	r2, 800518c <quorem+0xf4>
 8005180:	3b04      	subs	r3, #4
 8005182:	429e      	cmp	r6, r3
 8005184:	461a      	mov	r2, r3
 8005186:	d30b      	bcc.n	80051a0 <quorem+0x108>
 8005188:	f8c8 4010 	str.w	r4, [r8, #16]
 800518c:	4628      	mov	r0, r5
 800518e:	b003      	add	sp, #12
 8005190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	3b04      	subs	r3, #4
 8005198:	2a00      	cmp	r2, #0
 800519a:	d1ca      	bne.n	8005132 <quorem+0x9a>
 800519c:	3c01      	subs	r4, #1
 800519e:	e7c5      	b.n	800512c <quorem+0x94>
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	3b04      	subs	r3, #4
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d1ef      	bne.n	8005188 <quorem+0xf0>
 80051a8:	3c01      	subs	r4, #1
 80051aa:	e7ea      	b.n	8005182 <quorem+0xea>
 80051ac:	2000      	movs	r0, #0
 80051ae:	e7ee      	b.n	800518e <quorem+0xf6>

080051b0 <_dtoa_r>:
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	ec57 6b10 	vmov	r6, r7, d0
 80051b8:	b097      	sub	sp, #92	; 0x5c
 80051ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051bc:	9106      	str	r1, [sp, #24]
 80051be:	4604      	mov	r4, r0
 80051c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80051c2:	9312      	str	r3, [sp, #72]	; 0x48
 80051c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80051c8:	e9cd 6700 	strd	r6, r7, [sp]
 80051cc:	b93d      	cbnz	r5, 80051de <_dtoa_r+0x2e>
 80051ce:	2010      	movs	r0, #16
 80051d0:	f000 fdb4 	bl	8005d3c <malloc>
 80051d4:	6260      	str	r0, [r4, #36]	; 0x24
 80051d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051da:	6005      	str	r5, [r0, #0]
 80051dc:	60c5      	str	r5, [r0, #12]
 80051de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	b151      	cbz	r1, 80051fa <_dtoa_r+0x4a>
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	604a      	str	r2, [r1, #4]
 80051e8:	2301      	movs	r3, #1
 80051ea:	4093      	lsls	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fdeb 	bl	8005dca <_Bfree>
 80051f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	1e3b      	subs	r3, r7, #0
 80051fc:	bfbb      	ittet	lt
 80051fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005202:	9301      	strlt	r3, [sp, #4]
 8005204:	2300      	movge	r3, #0
 8005206:	2201      	movlt	r2, #1
 8005208:	bfac      	ite	ge
 800520a:	f8c8 3000 	strge.w	r3, [r8]
 800520e:	f8c8 2000 	strlt.w	r2, [r8]
 8005212:	4baf      	ldr	r3, [pc, #700]	; (80054d0 <_dtoa_r+0x320>)
 8005214:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005218:	ea33 0308 	bics.w	r3, r3, r8
 800521c:	d114      	bne.n	8005248 <_dtoa_r+0x98>
 800521e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005220:	f242 730f 	movw	r3, #9999	; 0x270f
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	9b00      	ldr	r3, [sp, #0]
 8005228:	b923      	cbnz	r3, 8005234 <_dtoa_r+0x84>
 800522a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800522e:	2800      	cmp	r0, #0
 8005230:	f000 8542 	beq.w	8005cb8 <_dtoa_r+0xb08>
 8005234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005236:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80054e4 <_dtoa_r+0x334>
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8544 	beq.w	8005cc8 <_dtoa_r+0xb18>
 8005240:	f10b 0303 	add.w	r3, fp, #3
 8005244:	f000 bd3e 	b.w	8005cc4 <_dtoa_r+0xb14>
 8005248:	e9dd 6700 	ldrd	r6, r7, [sp]
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fb fc40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005258:	4681      	mov	r9, r0
 800525a:	b168      	cbz	r0, 8005278 <_dtoa_r+0xc8>
 800525c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800525e:	2301      	movs	r3, #1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8524 	beq.w	8005cb2 <_dtoa_r+0xb02>
 800526a:	4b9a      	ldr	r3, [pc, #616]	; (80054d4 <_dtoa_r+0x324>)
 800526c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800526e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	f000 bd28 	b.w	8005cc8 <_dtoa_r+0xb18>
 8005278:	aa14      	add	r2, sp, #80	; 0x50
 800527a:	a915      	add	r1, sp, #84	; 0x54
 800527c:	ec47 6b10 	vmov	d0, r6, r7
 8005280:	4620      	mov	r0, r4
 8005282:	f000 fffa 	bl	800627a <__d2b>
 8005286:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800528a:	9004      	str	r0, [sp, #16]
 800528c:	2d00      	cmp	r5, #0
 800528e:	d07c      	beq.n	800538a <_dtoa_r+0x1da>
 8005290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005294:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005298:	46b2      	mov	sl, r6
 800529a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800529e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80052a6:	2200      	movs	r2, #0
 80052a8:	4b8b      	ldr	r3, [pc, #556]	; (80054d8 <_dtoa_r+0x328>)
 80052aa:	4650      	mov	r0, sl
 80052ac:	4659      	mov	r1, fp
 80052ae:	f7fa fff3 	bl	8000298 <__aeabi_dsub>
 80052b2:	a381      	add	r3, pc, #516	; (adr r3, 80054b8 <_dtoa_r+0x308>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fb f9a6 	bl	8000608 <__aeabi_dmul>
 80052bc:	a380      	add	r3, pc, #512	; (adr r3, 80054c0 <_dtoa_r+0x310>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f7fa ffeb 	bl	800029c <__adddf3>
 80052c6:	4606      	mov	r6, r0
 80052c8:	4628      	mov	r0, r5
 80052ca:	460f      	mov	r7, r1
 80052cc:	f7fb f932 	bl	8000534 <__aeabi_i2d>
 80052d0:	a37d      	add	r3, pc, #500	; (adr r3, 80054c8 <_dtoa_r+0x318>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fb f997 	bl	8000608 <__aeabi_dmul>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4630      	mov	r0, r6
 80052e0:	4639      	mov	r1, r7
 80052e2:	f7fa ffdb 	bl	800029c <__adddf3>
 80052e6:	4606      	mov	r6, r0
 80052e8:	460f      	mov	r7, r1
 80052ea:	f7fb fc3d 	bl	8000b68 <__aeabi_d2iz>
 80052ee:	2200      	movs	r2, #0
 80052f0:	4682      	mov	sl, r0
 80052f2:	2300      	movs	r3, #0
 80052f4:	4630      	mov	r0, r6
 80052f6:	4639      	mov	r1, r7
 80052f8:	f7fb fbf8 	bl	8000aec <__aeabi_dcmplt>
 80052fc:	b148      	cbz	r0, 8005312 <_dtoa_r+0x162>
 80052fe:	4650      	mov	r0, sl
 8005300:	f7fb f918 	bl	8000534 <__aeabi_i2d>
 8005304:	4632      	mov	r2, r6
 8005306:	463b      	mov	r3, r7
 8005308:	f7fb fbe6 	bl	8000ad8 <__aeabi_dcmpeq>
 800530c:	b908      	cbnz	r0, 8005312 <_dtoa_r+0x162>
 800530e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005312:	f1ba 0f16 	cmp.w	sl, #22
 8005316:	d859      	bhi.n	80053cc <_dtoa_r+0x21c>
 8005318:	4970      	ldr	r1, [pc, #448]	; (80054dc <_dtoa_r+0x32c>)
 800531a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800531e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005326:	f7fb fbff 	bl	8000b28 <__aeabi_dcmpgt>
 800532a:	2800      	cmp	r0, #0
 800532c:	d050      	beq.n	80053d0 <_dtoa_r+0x220>
 800532e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005332:	2300      	movs	r3, #0
 8005334:	930f      	str	r3, [sp, #60]	; 0x3c
 8005336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005338:	1b5d      	subs	r5, r3, r5
 800533a:	f1b5 0801 	subs.w	r8, r5, #1
 800533e:	bf49      	itett	mi
 8005340:	f1c5 0301 	rsbmi	r3, r5, #1
 8005344:	2300      	movpl	r3, #0
 8005346:	9305      	strmi	r3, [sp, #20]
 8005348:	f04f 0800 	movmi.w	r8, #0
 800534c:	bf58      	it	pl
 800534e:	9305      	strpl	r3, [sp, #20]
 8005350:	f1ba 0f00 	cmp.w	sl, #0
 8005354:	db3e      	blt.n	80053d4 <_dtoa_r+0x224>
 8005356:	2300      	movs	r3, #0
 8005358:	44d0      	add	r8, sl
 800535a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800535e:	9307      	str	r3, [sp, #28]
 8005360:	9b06      	ldr	r3, [sp, #24]
 8005362:	2b09      	cmp	r3, #9
 8005364:	f200 8090 	bhi.w	8005488 <_dtoa_r+0x2d8>
 8005368:	2b05      	cmp	r3, #5
 800536a:	bfc4      	itt	gt
 800536c:	3b04      	subgt	r3, #4
 800536e:	9306      	strgt	r3, [sp, #24]
 8005370:	9b06      	ldr	r3, [sp, #24]
 8005372:	f1a3 0302 	sub.w	r3, r3, #2
 8005376:	bfcc      	ite	gt
 8005378:	2500      	movgt	r5, #0
 800537a:	2501      	movle	r5, #1
 800537c:	2b03      	cmp	r3, #3
 800537e:	f200 808f 	bhi.w	80054a0 <_dtoa_r+0x2f0>
 8005382:	e8df f003 	tbb	[pc, r3]
 8005386:	7f7d      	.short	0x7f7d
 8005388:	7131      	.short	0x7131
 800538a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800538e:	441d      	add	r5, r3
 8005390:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005394:	2820      	cmp	r0, #32
 8005396:	dd13      	ble.n	80053c0 <_dtoa_r+0x210>
 8005398:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800539c:	9b00      	ldr	r3, [sp, #0]
 800539e:	fa08 f800 	lsl.w	r8, r8, r0
 80053a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053a6:	fa23 f000 	lsr.w	r0, r3, r0
 80053aa:	ea48 0000 	orr.w	r0, r8, r0
 80053ae:	f7fb f8b1 	bl	8000514 <__aeabi_ui2d>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4682      	mov	sl, r0
 80053b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80053ba:	3d01      	subs	r5, #1
 80053bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80053be:	e772      	b.n	80052a6 <_dtoa_r+0xf6>
 80053c0:	9b00      	ldr	r3, [sp, #0]
 80053c2:	f1c0 0020 	rsb	r0, r0, #32
 80053c6:	fa03 f000 	lsl.w	r0, r3, r0
 80053ca:	e7f0      	b.n	80053ae <_dtoa_r+0x1fe>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7b1      	b.n	8005334 <_dtoa_r+0x184>
 80053d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80053d2:	e7b0      	b.n	8005336 <_dtoa_r+0x186>
 80053d4:	9b05      	ldr	r3, [sp, #20]
 80053d6:	eba3 030a 	sub.w	r3, r3, sl
 80053da:	9305      	str	r3, [sp, #20]
 80053dc:	f1ca 0300 	rsb	r3, sl, #0
 80053e0:	9307      	str	r3, [sp, #28]
 80053e2:	2300      	movs	r3, #0
 80053e4:	930e      	str	r3, [sp, #56]	; 0x38
 80053e6:	e7bb      	b.n	8005360 <_dtoa_r+0x1b0>
 80053e8:	2301      	movs	r3, #1
 80053ea:	930a      	str	r3, [sp, #40]	; 0x28
 80053ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dd59      	ble.n	80054a6 <_dtoa_r+0x2f6>
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	4699      	mov	r9, r3
 80053f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053f8:	2200      	movs	r2, #0
 80053fa:	6072      	str	r2, [r6, #4]
 80053fc:	2204      	movs	r2, #4
 80053fe:	f102 0014 	add.w	r0, r2, #20
 8005402:	4298      	cmp	r0, r3
 8005404:	6871      	ldr	r1, [r6, #4]
 8005406:	d953      	bls.n	80054b0 <_dtoa_r+0x300>
 8005408:	4620      	mov	r0, r4
 800540a:	f000 fcaa 	bl	8005d62 <_Balloc>
 800540e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005410:	6030      	str	r0, [r6, #0]
 8005412:	f1b9 0f0e 	cmp.w	r9, #14
 8005416:	f8d3 b000 	ldr.w	fp, [r3]
 800541a:	f200 80e6 	bhi.w	80055ea <_dtoa_r+0x43a>
 800541e:	2d00      	cmp	r5, #0
 8005420:	f000 80e3 	beq.w	80055ea <_dtoa_r+0x43a>
 8005424:	ed9d 7b00 	vldr	d7, [sp]
 8005428:	f1ba 0f00 	cmp.w	sl, #0
 800542c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005430:	dd74      	ble.n	800551c <_dtoa_r+0x36c>
 8005432:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <_dtoa_r+0x32c>)
 8005434:	f00a 030f 	and.w	r3, sl, #15
 8005438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800543c:	ed93 7b00 	vldr	d7, [r3]
 8005440:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005444:	06f0      	lsls	r0, r6, #27
 8005446:	ed8d 7b08 	vstr	d7, [sp, #32]
 800544a:	d565      	bpl.n	8005518 <_dtoa_r+0x368>
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <_dtoa_r+0x330>)
 800544e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005452:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005456:	f7fb fa01 	bl	800085c <__aeabi_ddiv>
 800545a:	e9cd 0100 	strd	r0, r1, [sp]
 800545e:	f006 060f 	and.w	r6, r6, #15
 8005462:	2503      	movs	r5, #3
 8005464:	4f1e      	ldr	r7, [pc, #120]	; (80054e0 <_dtoa_r+0x330>)
 8005466:	e04c      	b.n	8005502 <_dtoa_r+0x352>
 8005468:	2301      	movs	r3, #1
 800546a:	930a      	str	r3, [sp, #40]	; 0x28
 800546c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546e:	4453      	add	r3, sl
 8005470:	f103 0901 	add.w	r9, r3, #1
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	464b      	mov	r3, r9
 8005478:	2b01      	cmp	r3, #1
 800547a:	bfb8      	it	lt
 800547c:	2301      	movlt	r3, #1
 800547e:	e7ba      	b.n	80053f6 <_dtoa_r+0x246>
 8005480:	2300      	movs	r3, #0
 8005482:	e7b2      	b.n	80053ea <_dtoa_r+0x23a>
 8005484:	2300      	movs	r3, #0
 8005486:	e7f0      	b.n	800546a <_dtoa_r+0x2ba>
 8005488:	2501      	movs	r5, #1
 800548a:	2300      	movs	r3, #0
 800548c:	9306      	str	r3, [sp, #24]
 800548e:	950a      	str	r5, [sp, #40]	; 0x28
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	9302      	str	r3, [sp, #8]
 8005496:	4699      	mov	r9, r3
 8005498:	2200      	movs	r2, #0
 800549a:	2312      	movs	r3, #18
 800549c:	920b      	str	r2, [sp, #44]	; 0x2c
 800549e:	e7aa      	b.n	80053f6 <_dtoa_r+0x246>
 80054a0:	2301      	movs	r3, #1
 80054a2:	930a      	str	r3, [sp, #40]	; 0x28
 80054a4:	e7f4      	b.n	8005490 <_dtoa_r+0x2e0>
 80054a6:	2301      	movs	r3, #1
 80054a8:	9302      	str	r3, [sp, #8]
 80054aa:	4699      	mov	r9, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	e7f5      	b.n	800549c <_dtoa_r+0x2ec>
 80054b0:	3101      	adds	r1, #1
 80054b2:	6071      	str	r1, [r6, #4]
 80054b4:	0052      	lsls	r2, r2, #1
 80054b6:	e7a2      	b.n	80053fe <_dtoa_r+0x24e>
 80054b8:	636f4361 	.word	0x636f4361
 80054bc:	3fd287a7 	.word	0x3fd287a7
 80054c0:	8b60c8b3 	.word	0x8b60c8b3
 80054c4:	3fc68a28 	.word	0x3fc68a28
 80054c8:	509f79fb 	.word	0x509f79fb
 80054cc:	3fd34413 	.word	0x3fd34413
 80054d0:	7ff00000 	.word	0x7ff00000
 80054d4:	0800688d 	.word	0x0800688d
 80054d8:	3ff80000 	.word	0x3ff80000
 80054dc:	080068e8 	.word	0x080068e8
 80054e0:	080068c0 	.word	0x080068c0
 80054e4:	080068b9 	.word	0x080068b9
 80054e8:	07f1      	lsls	r1, r6, #31
 80054ea:	d508      	bpl.n	80054fe <_dtoa_r+0x34e>
 80054ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f4:	f7fb f888 	bl	8000608 <__aeabi_dmul>
 80054f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054fc:	3501      	adds	r5, #1
 80054fe:	1076      	asrs	r6, r6, #1
 8005500:	3708      	adds	r7, #8
 8005502:	2e00      	cmp	r6, #0
 8005504:	d1f0      	bne.n	80054e8 <_dtoa_r+0x338>
 8005506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800550a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800550e:	f7fb f9a5 	bl	800085c <__aeabi_ddiv>
 8005512:	e9cd 0100 	strd	r0, r1, [sp]
 8005516:	e01a      	b.n	800554e <_dtoa_r+0x39e>
 8005518:	2502      	movs	r5, #2
 800551a:	e7a3      	b.n	8005464 <_dtoa_r+0x2b4>
 800551c:	f000 80a0 	beq.w	8005660 <_dtoa_r+0x4b0>
 8005520:	f1ca 0600 	rsb	r6, sl, #0
 8005524:	4b9f      	ldr	r3, [pc, #636]	; (80057a4 <_dtoa_r+0x5f4>)
 8005526:	4fa0      	ldr	r7, [pc, #640]	; (80057a8 <_dtoa_r+0x5f8>)
 8005528:	f006 020f 	and.w	r2, r6, #15
 800552c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005538:	f7fb f866 	bl	8000608 <__aeabi_dmul>
 800553c:	e9cd 0100 	strd	r0, r1, [sp]
 8005540:	1136      	asrs	r6, r6, #4
 8005542:	2300      	movs	r3, #0
 8005544:	2502      	movs	r5, #2
 8005546:	2e00      	cmp	r6, #0
 8005548:	d17f      	bne.n	800564a <_dtoa_r+0x49a>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e1      	bne.n	8005512 <_dtoa_r+0x362>
 800554e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8087 	beq.w	8005664 <_dtoa_r+0x4b4>
 8005556:	e9dd 6700 	ldrd	r6, r7, [sp]
 800555a:	2200      	movs	r2, #0
 800555c:	4b93      	ldr	r3, [pc, #588]	; (80057ac <_dtoa_r+0x5fc>)
 800555e:	4630      	mov	r0, r6
 8005560:	4639      	mov	r1, r7
 8005562:	f7fb fac3 	bl	8000aec <__aeabi_dcmplt>
 8005566:	2800      	cmp	r0, #0
 8005568:	d07c      	beq.n	8005664 <_dtoa_r+0x4b4>
 800556a:	f1b9 0f00 	cmp.w	r9, #0
 800556e:	d079      	beq.n	8005664 <_dtoa_r+0x4b4>
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dd35      	ble.n	80055e2 <_dtoa_r+0x432>
 8005576:	f10a 33ff 	add.w	r3, sl, #4294967295
 800557a:	9308      	str	r3, [sp, #32]
 800557c:	4639      	mov	r1, r7
 800557e:	2200      	movs	r2, #0
 8005580:	4b8b      	ldr	r3, [pc, #556]	; (80057b0 <_dtoa_r+0x600>)
 8005582:	4630      	mov	r0, r6
 8005584:	f7fb f840 	bl	8000608 <__aeabi_dmul>
 8005588:	e9cd 0100 	strd	r0, r1, [sp]
 800558c:	9f02      	ldr	r7, [sp, #8]
 800558e:	3501      	adds	r5, #1
 8005590:	4628      	mov	r0, r5
 8005592:	f7fa ffcf 	bl	8000534 <__aeabi_i2d>
 8005596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800559a:	f7fb f835 	bl	8000608 <__aeabi_dmul>
 800559e:	2200      	movs	r2, #0
 80055a0:	4b84      	ldr	r3, [pc, #528]	; (80057b4 <_dtoa_r+0x604>)
 80055a2:	f7fa fe7b 	bl	800029c <__adddf3>
 80055a6:	4605      	mov	r5, r0
 80055a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80055ac:	2f00      	cmp	r7, #0
 80055ae:	d15d      	bne.n	800566c <_dtoa_r+0x4bc>
 80055b0:	2200      	movs	r2, #0
 80055b2:	4b81      	ldr	r3, [pc, #516]	; (80057b8 <_dtoa_r+0x608>)
 80055b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055b8:	f7fa fe6e 	bl	8000298 <__aeabi_dsub>
 80055bc:	462a      	mov	r2, r5
 80055be:	4633      	mov	r3, r6
 80055c0:	e9cd 0100 	strd	r0, r1, [sp]
 80055c4:	f7fb fab0 	bl	8000b28 <__aeabi_dcmpgt>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	f040 8288 	bne.w	8005ade <_dtoa_r+0x92e>
 80055ce:	462a      	mov	r2, r5
 80055d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055d8:	f7fb fa88 	bl	8000aec <__aeabi_dcmplt>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f040 827c 	bne.w	8005ada <_dtoa_r+0x92a>
 80055e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055e6:	e9cd 2300 	strd	r2, r3, [sp]
 80055ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f2c0 8150 	blt.w	8005892 <_dtoa_r+0x6e2>
 80055f2:	f1ba 0f0e 	cmp.w	sl, #14
 80055f6:	f300 814c 	bgt.w	8005892 <_dtoa_r+0x6e2>
 80055fa:	4b6a      	ldr	r3, [pc, #424]	; (80057a4 <_dtoa_r+0x5f4>)
 80055fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005600:	ed93 7b00 	vldr	d7, [r3]
 8005604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005606:	2b00      	cmp	r3, #0
 8005608:	ed8d 7b02 	vstr	d7, [sp, #8]
 800560c:	f280 80d8 	bge.w	80057c0 <_dtoa_r+0x610>
 8005610:	f1b9 0f00 	cmp.w	r9, #0
 8005614:	f300 80d4 	bgt.w	80057c0 <_dtoa_r+0x610>
 8005618:	f040 825e 	bne.w	8005ad8 <_dtoa_r+0x928>
 800561c:	2200      	movs	r2, #0
 800561e:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <_dtoa_r+0x608>)
 8005620:	ec51 0b17 	vmov	r0, r1, d7
 8005624:	f7fa fff0 	bl	8000608 <__aeabi_dmul>
 8005628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800562c:	f7fb fa72 	bl	8000b14 <__aeabi_dcmpge>
 8005630:	464f      	mov	r7, r9
 8005632:	464e      	mov	r6, r9
 8005634:	2800      	cmp	r0, #0
 8005636:	f040 8234 	bne.w	8005aa2 <_dtoa_r+0x8f2>
 800563a:	2331      	movs	r3, #49	; 0x31
 800563c:	f10b 0501 	add.w	r5, fp, #1
 8005640:	f88b 3000 	strb.w	r3, [fp]
 8005644:	f10a 0a01 	add.w	sl, sl, #1
 8005648:	e22f      	b.n	8005aaa <_dtoa_r+0x8fa>
 800564a:	07f2      	lsls	r2, r6, #31
 800564c:	d505      	bpl.n	800565a <_dtoa_r+0x4aa>
 800564e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005652:	f7fa ffd9 	bl	8000608 <__aeabi_dmul>
 8005656:	3501      	adds	r5, #1
 8005658:	2301      	movs	r3, #1
 800565a:	1076      	asrs	r6, r6, #1
 800565c:	3708      	adds	r7, #8
 800565e:	e772      	b.n	8005546 <_dtoa_r+0x396>
 8005660:	2502      	movs	r5, #2
 8005662:	e774      	b.n	800554e <_dtoa_r+0x39e>
 8005664:	f8cd a020 	str.w	sl, [sp, #32]
 8005668:	464f      	mov	r7, r9
 800566a:	e791      	b.n	8005590 <_dtoa_r+0x3e0>
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <_dtoa_r+0x5f4>)
 800566e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005672:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d047      	beq.n	800570c <_dtoa_r+0x55c>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	2000      	movs	r0, #0
 8005682:	494e      	ldr	r1, [pc, #312]	; (80057bc <_dtoa_r+0x60c>)
 8005684:	f7fb f8ea 	bl	800085c <__aeabi_ddiv>
 8005688:	462a      	mov	r2, r5
 800568a:	4633      	mov	r3, r6
 800568c:	f7fa fe04 	bl	8000298 <__aeabi_dsub>
 8005690:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005694:	465d      	mov	r5, fp
 8005696:	e9dd 0100 	ldrd	r0, r1, [sp]
 800569a:	f7fb fa65 	bl	8000b68 <__aeabi_d2iz>
 800569e:	4606      	mov	r6, r0
 80056a0:	f7fa ff48 	bl	8000534 <__aeabi_i2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ac:	f7fa fdf4 	bl	8000298 <__aeabi_dsub>
 80056b0:	3630      	adds	r6, #48	; 0x30
 80056b2:	f805 6b01 	strb.w	r6, [r5], #1
 80056b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056ba:	e9cd 0100 	strd	r0, r1, [sp]
 80056be:	f7fb fa15 	bl	8000aec <__aeabi_dcmplt>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d163      	bne.n	800578e <_dtoa_r+0x5de>
 80056c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ca:	2000      	movs	r0, #0
 80056cc:	4937      	ldr	r1, [pc, #220]	; (80057ac <_dtoa_r+0x5fc>)
 80056ce:	f7fa fde3 	bl	8000298 <__aeabi_dsub>
 80056d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056d6:	f7fb fa09 	bl	8000aec <__aeabi_dcmplt>
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 80b7 	bne.w	800584e <_dtoa_r+0x69e>
 80056e0:	eba5 030b 	sub.w	r3, r5, fp
 80056e4:	429f      	cmp	r7, r3
 80056e6:	f77f af7c 	ble.w	80055e2 <_dtoa_r+0x432>
 80056ea:	2200      	movs	r2, #0
 80056ec:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <_dtoa_r+0x600>)
 80056ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	2200      	movs	r2, #0
 80056f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80056fc:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <_dtoa_r+0x600>)
 80056fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005702:	f7fa ff81 	bl	8000608 <__aeabi_dmul>
 8005706:	e9cd 0100 	strd	r0, r1, [sp]
 800570a:	e7c4      	b.n	8005696 <_dtoa_r+0x4e6>
 800570c:	462a      	mov	r2, r5
 800570e:	4633      	mov	r3, r6
 8005710:	f7fa ff7a 	bl	8000608 <__aeabi_dmul>
 8005714:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005718:	eb0b 0507 	add.w	r5, fp, r7
 800571c:	465e      	mov	r6, fp
 800571e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005722:	f7fb fa21 	bl	8000b68 <__aeabi_d2iz>
 8005726:	4607      	mov	r7, r0
 8005728:	f7fa ff04 	bl	8000534 <__aeabi_i2d>
 800572c:	3730      	adds	r7, #48	; 0x30
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005736:	f7fa fdaf 	bl	8000298 <__aeabi_dsub>
 800573a:	f806 7b01 	strb.w	r7, [r6], #1
 800573e:	42ae      	cmp	r6, r5
 8005740:	e9cd 0100 	strd	r0, r1, [sp]
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	d126      	bne.n	8005798 <_dtoa_r+0x5e8>
 800574a:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <_dtoa_r+0x60c>)
 800574c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005750:	f7fa fda4 	bl	800029c <__adddf3>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800575c:	f7fb f9e4 	bl	8000b28 <__aeabi_dcmpgt>
 8005760:	2800      	cmp	r0, #0
 8005762:	d174      	bne.n	800584e <_dtoa_r+0x69e>
 8005764:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005768:	2000      	movs	r0, #0
 800576a:	4914      	ldr	r1, [pc, #80]	; (80057bc <_dtoa_r+0x60c>)
 800576c:	f7fa fd94 	bl	8000298 <__aeabi_dsub>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005778:	f7fb f9b8 	bl	8000aec <__aeabi_dcmplt>
 800577c:	2800      	cmp	r0, #0
 800577e:	f43f af30 	beq.w	80055e2 <_dtoa_r+0x432>
 8005782:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005786:	2b30      	cmp	r3, #48	; 0x30
 8005788:	f105 32ff 	add.w	r2, r5, #4294967295
 800578c:	d002      	beq.n	8005794 <_dtoa_r+0x5e4>
 800578e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005792:	e04a      	b.n	800582a <_dtoa_r+0x67a>
 8005794:	4615      	mov	r5, r2
 8005796:	e7f4      	b.n	8005782 <_dtoa_r+0x5d2>
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <_dtoa_r+0x600>)
 800579a:	f7fa ff35 	bl	8000608 <__aeabi_dmul>
 800579e:	e9cd 0100 	strd	r0, r1, [sp]
 80057a2:	e7bc      	b.n	800571e <_dtoa_r+0x56e>
 80057a4:	080068e8 	.word	0x080068e8
 80057a8:	080068c0 	.word	0x080068c0
 80057ac:	3ff00000 	.word	0x3ff00000
 80057b0:	40240000 	.word	0x40240000
 80057b4:	401c0000 	.word	0x401c0000
 80057b8:	40140000 	.word	0x40140000
 80057bc:	3fe00000 	.word	0x3fe00000
 80057c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057c4:	465d      	mov	r5, fp
 80057c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ca:	4630      	mov	r0, r6
 80057cc:	4639      	mov	r1, r7
 80057ce:	f7fb f845 	bl	800085c <__aeabi_ddiv>
 80057d2:	f7fb f9c9 	bl	8000b68 <__aeabi_d2iz>
 80057d6:	4680      	mov	r8, r0
 80057d8:	f7fa feac 	bl	8000534 <__aeabi_i2d>
 80057dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057e0:	f7fa ff12 	bl	8000608 <__aeabi_dmul>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4630      	mov	r0, r6
 80057ea:	4639      	mov	r1, r7
 80057ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80057f0:	f7fa fd52 	bl	8000298 <__aeabi_dsub>
 80057f4:	f805 6b01 	strb.w	r6, [r5], #1
 80057f8:	eba5 060b 	sub.w	r6, r5, fp
 80057fc:	45b1      	cmp	r9, r6
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	d139      	bne.n	8005878 <_dtoa_r+0x6c8>
 8005804:	f7fa fd4a 	bl	800029c <__adddf3>
 8005808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800580c:	4606      	mov	r6, r0
 800580e:	460f      	mov	r7, r1
 8005810:	f7fb f98a 	bl	8000b28 <__aeabi_dcmpgt>
 8005814:	b9c8      	cbnz	r0, 800584a <_dtoa_r+0x69a>
 8005816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800581a:	4630      	mov	r0, r6
 800581c:	4639      	mov	r1, r7
 800581e:	f7fb f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005822:	b110      	cbz	r0, 800582a <_dtoa_r+0x67a>
 8005824:	f018 0f01 	tst.w	r8, #1
 8005828:	d10f      	bne.n	800584a <_dtoa_r+0x69a>
 800582a:	9904      	ldr	r1, [sp, #16]
 800582c:	4620      	mov	r0, r4
 800582e:	f000 facc 	bl	8005dca <_Bfree>
 8005832:	2300      	movs	r3, #0
 8005834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005836:	702b      	strb	r3, [r5, #0]
 8005838:	f10a 0301 	add.w	r3, sl, #1
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8241 	beq.w	8005cc8 <_dtoa_r+0xb18>
 8005846:	601d      	str	r5, [r3, #0]
 8005848:	e23e      	b.n	8005cc8 <_dtoa_r+0xb18>
 800584a:	f8cd a020 	str.w	sl, [sp, #32]
 800584e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005852:	2a39      	cmp	r2, #57	; 0x39
 8005854:	f105 33ff 	add.w	r3, r5, #4294967295
 8005858:	d108      	bne.n	800586c <_dtoa_r+0x6bc>
 800585a:	459b      	cmp	fp, r3
 800585c:	d10a      	bne.n	8005874 <_dtoa_r+0x6c4>
 800585e:	9b08      	ldr	r3, [sp, #32]
 8005860:	3301      	adds	r3, #1
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	2330      	movs	r3, #48	; 0x30
 8005866:	f88b 3000 	strb.w	r3, [fp]
 800586a:	465b      	mov	r3, fp
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	3201      	adds	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	e78c      	b.n	800578e <_dtoa_r+0x5de>
 8005874:	461d      	mov	r5, r3
 8005876:	e7ea      	b.n	800584e <_dtoa_r+0x69e>
 8005878:	2200      	movs	r2, #0
 800587a:	4b9b      	ldr	r3, [pc, #620]	; (8005ae8 <_dtoa_r+0x938>)
 800587c:	f7fa fec4 	bl	8000608 <__aeabi_dmul>
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	f7fb f926 	bl	8000ad8 <__aeabi_dcmpeq>
 800588c:	2800      	cmp	r0, #0
 800588e:	d09a      	beq.n	80057c6 <_dtoa_r+0x616>
 8005890:	e7cb      	b.n	800582a <_dtoa_r+0x67a>
 8005892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005894:	2a00      	cmp	r2, #0
 8005896:	f000 808b 	beq.w	80059b0 <_dtoa_r+0x800>
 800589a:	9a06      	ldr	r2, [sp, #24]
 800589c:	2a01      	cmp	r2, #1
 800589e:	dc6e      	bgt.n	800597e <_dtoa_r+0x7ce>
 80058a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	d067      	beq.n	8005976 <_dtoa_r+0x7c6>
 80058a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058aa:	9f07      	ldr	r7, [sp, #28]
 80058ac:	9d05      	ldr	r5, [sp, #20]
 80058ae:	9a05      	ldr	r2, [sp, #20]
 80058b0:	2101      	movs	r1, #1
 80058b2:	441a      	add	r2, r3
 80058b4:	4620      	mov	r0, r4
 80058b6:	9205      	str	r2, [sp, #20]
 80058b8:	4498      	add	r8, r3
 80058ba:	f000 fb26 	bl	8005f0a <__i2b>
 80058be:	4606      	mov	r6, r0
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	dd0c      	ble.n	80058de <_dtoa_r+0x72e>
 80058c4:	f1b8 0f00 	cmp.w	r8, #0
 80058c8:	dd09      	ble.n	80058de <_dtoa_r+0x72e>
 80058ca:	4545      	cmp	r5, r8
 80058cc:	9a05      	ldr	r2, [sp, #20]
 80058ce:	462b      	mov	r3, r5
 80058d0:	bfa8      	it	ge
 80058d2:	4643      	movge	r3, r8
 80058d4:	1ad2      	subs	r2, r2, r3
 80058d6:	9205      	str	r2, [sp, #20]
 80058d8:	1aed      	subs	r5, r5, r3
 80058da:	eba8 0803 	sub.w	r8, r8, r3
 80058de:	9b07      	ldr	r3, [sp, #28]
 80058e0:	b1eb      	cbz	r3, 800591e <_dtoa_r+0x76e>
 80058e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d067      	beq.n	80059b8 <_dtoa_r+0x808>
 80058e8:	b18f      	cbz	r7, 800590e <_dtoa_r+0x75e>
 80058ea:	4631      	mov	r1, r6
 80058ec:	463a      	mov	r2, r7
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fbaa 	bl	8006048 <__pow5mult>
 80058f4:	9a04      	ldr	r2, [sp, #16]
 80058f6:	4601      	mov	r1, r0
 80058f8:	4606      	mov	r6, r0
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fb0e 	bl	8005f1c <__multiply>
 8005900:	9904      	ldr	r1, [sp, #16]
 8005902:	9008      	str	r0, [sp, #32]
 8005904:	4620      	mov	r0, r4
 8005906:	f000 fa60 	bl	8005dca <_Bfree>
 800590a:	9b08      	ldr	r3, [sp, #32]
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	1bda      	subs	r2, r3, r7
 8005912:	d004      	beq.n	800591e <_dtoa_r+0x76e>
 8005914:	9904      	ldr	r1, [sp, #16]
 8005916:	4620      	mov	r0, r4
 8005918:	f000 fb96 	bl	8006048 <__pow5mult>
 800591c:	9004      	str	r0, [sp, #16]
 800591e:	2101      	movs	r1, #1
 8005920:	4620      	mov	r0, r4
 8005922:	f000 faf2 	bl	8005f0a <__i2b>
 8005926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005928:	4607      	mov	r7, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 81d0 	beq.w	8005cd0 <_dtoa_r+0xb20>
 8005930:	461a      	mov	r2, r3
 8005932:	4601      	mov	r1, r0
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fb87 	bl	8006048 <__pow5mult>
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	2b01      	cmp	r3, #1
 800593e:	4607      	mov	r7, r0
 8005940:	dc40      	bgt.n	80059c4 <_dtoa_r+0x814>
 8005942:	9b00      	ldr	r3, [sp, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d139      	bne.n	80059bc <_dtoa_r+0x80c>
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800594e:	2b00      	cmp	r3, #0
 8005950:	d136      	bne.n	80059c0 <_dtoa_r+0x810>
 8005952:	9b01      	ldr	r3, [sp, #4]
 8005954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005958:	0d1b      	lsrs	r3, r3, #20
 800595a:	051b      	lsls	r3, r3, #20
 800595c:	b12b      	cbz	r3, 800596a <_dtoa_r+0x7ba>
 800595e:	9b05      	ldr	r3, [sp, #20]
 8005960:	3301      	adds	r3, #1
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	f108 0801 	add.w	r8, r8, #1
 8005968:	2301      	movs	r3, #1
 800596a:	9307      	str	r3, [sp, #28]
 800596c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800596e:	2b00      	cmp	r3, #0
 8005970:	d12a      	bne.n	80059c8 <_dtoa_r+0x818>
 8005972:	2001      	movs	r0, #1
 8005974:	e030      	b.n	80059d8 <_dtoa_r+0x828>
 8005976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005978:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800597c:	e795      	b.n	80058aa <_dtoa_r+0x6fa>
 800597e:	9b07      	ldr	r3, [sp, #28]
 8005980:	f109 37ff 	add.w	r7, r9, #4294967295
 8005984:	42bb      	cmp	r3, r7
 8005986:	bfbf      	itttt	lt
 8005988:	9b07      	ldrlt	r3, [sp, #28]
 800598a:	9707      	strlt	r7, [sp, #28]
 800598c:	1afa      	sublt	r2, r7, r3
 800598e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005990:	bfbb      	ittet	lt
 8005992:	189b      	addlt	r3, r3, r2
 8005994:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005996:	1bdf      	subge	r7, r3, r7
 8005998:	2700      	movlt	r7, #0
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	bfb5      	itete	lt
 80059a0:	9b05      	ldrlt	r3, [sp, #20]
 80059a2:	9d05      	ldrge	r5, [sp, #20]
 80059a4:	eba3 0509 	sublt.w	r5, r3, r9
 80059a8:	464b      	movge	r3, r9
 80059aa:	bfb8      	it	lt
 80059ac:	2300      	movlt	r3, #0
 80059ae:	e77e      	b.n	80058ae <_dtoa_r+0x6fe>
 80059b0:	9f07      	ldr	r7, [sp, #28]
 80059b2:	9d05      	ldr	r5, [sp, #20]
 80059b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80059b6:	e783      	b.n	80058c0 <_dtoa_r+0x710>
 80059b8:	9a07      	ldr	r2, [sp, #28]
 80059ba:	e7ab      	b.n	8005914 <_dtoa_r+0x764>
 80059bc:	2300      	movs	r3, #0
 80059be:	e7d4      	b.n	800596a <_dtoa_r+0x7ba>
 80059c0:	9b00      	ldr	r3, [sp, #0]
 80059c2:	e7d2      	b.n	800596a <_dtoa_r+0x7ba>
 80059c4:	2300      	movs	r3, #0
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80059ce:	6918      	ldr	r0, [r3, #16]
 80059d0:	f000 fa4d 	bl	8005e6e <__hi0bits>
 80059d4:	f1c0 0020 	rsb	r0, r0, #32
 80059d8:	4440      	add	r0, r8
 80059da:	f010 001f 	ands.w	r0, r0, #31
 80059de:	d047      	beq.n	8005a70 <_dtoa_r+0x8c0>
 80059e0:	f1c0 0320 	rsb	r3, r0, #32
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	dd3b      	ble.n	8005a60 <_dtoa_r+0x8b0>
 80059e8:	9b05      	ldr	r3, [sp, #20]
 80059ea:	f1c0 001c 	rsb	r0, r0, #28
 80059ee:	4403      	add	r3, r0
 80059f0:	9305      	str	r3, [sp, #20]
 80059f2:	4405      	add	r5, r0
 80059f4:	4480      	add	r8, r0
 80059f6:	9b05      	ldr	r3, [sp, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dd05      	ble.n	8005a08 <_dtoa_r+0x858>
 80059fc:	461a      	mov	r2, r3
 80059fe:	9904      	ldr	r1, [sp, #16]
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fb6f 	bl	80060e4 <__lshift>
 8005a06:	9004      	str	r0, [sp, #16]
 8005a08:	f1b8 0f00 	cmp.w	r8, #0
 8005a0c:	dd05      	ble.n	8005a1a <_dtoa_r+0x86a>
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4642      	mov	r2, r8
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 fb66 	bl	80060e4 <__lshift>
 8005a18:	4607      	mov	r7, r0
 8005a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a1c:	b353      	cbz	r3, 8005a74 <_dtoa_r+0x8c4>
 8005a1e:	4639      	mov	r1, r7
 8005a20:	9804      	ldr	r0, [sp, #16]
 8005a22:	f000 fbb3 	bl	800618c <__mcmp>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	da24      	bge.n	8005a74 <_dtoa_r+0x8c4>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	9904      	ldr	r1, [sp, #16]
 8005a30:	4620      	mov	r0, r4
 8005a32:	f000 f9e1 	bl	8005df8 <__multadd>
 8005a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a38:	9004      	str	r0, [sp, #16]
 8005a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 814d 	beq.w	8005cde <_dtoa_r+0xb2e>
 8005a44:	2300      	movs	r3, #0
 8005a46:	4631      	mov	r1, r6
 8005a48:	220a      	movs	r2, #10
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 f9d4 	bl	8005df8 <__multadd>
 8005a50:	9b02      	ldr	r3, [sp, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	4606      	mov	r6, r0
 8005a56:	dc4f      	bgt.n	8005af8 <_dtoa_r+0x948>
 8005a58:	9b06      	ldr	r3, [sp, #24]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	dd4c      	ble.n	8005af8 <_dtoa_r+0x948>
 8005a5e:	e011      	b.n	8005a84 <_dtoa_r+0x8d4>
 8005a60:	d0c9      	beq.n	80059f6 <_dtoa_r+0x846>
 8005a62:	9a05      	ldr	r2, [sp, #20]
 8005a64:	331c      	adds	r3, #28
 8005a66:	441a      	add	r2, r3
 8005a68:	9205      	str	r2, [sp, #20]
 8005a6a:	441d      	add	r5, r3
 8005a6c:	4498      	add	r8, r3
 8005a6e:	e7c2      	b.n	80059f6 <_dtoa_r+0x846>
 8005a70:	4603      	mov	r3, r0
 8005a72:	e7f6      	b.n	8005a62 <_dtoa_r+0x8b2>
 8005a74:	f1b9 0f00 	cmp.w	r9, #0
 8005a78:	dc38      	bgt.n	8005aec <_dtoa_r+0x93c>
 8005a7a:	9b06      	ldr	r3, [sp, #24]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	dd35      	ble.n	8005aec <_dtoa_r+0x93c>
 8005a80:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	b963      	cbnz	r3, 8005aa2 <_dtoa_r+0x8f2>
 8005a88:	4639      	mov	r1, r7
 8005a8a:	2205      	movs	r2, #5
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 f9b3 	bl	8005df8 <__multadd>
 8005a92:	4601      	mov	r1, r0
 8005a94:	4607      	mov	r7, r0
 8005a96:	9804      	ldr	r0, [sp, #16]
 8005a98:	f000 fb78 	bl	800618c <__mcmp>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f73f adcc 	bgt.w	800563a <_dtoa_r+0x48a>
 8005aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aa4:	465d      	mov	r5, fp
 8005aa6:	ea6f 0a03 	mvn.w	sl, r3
 8005aaa:	f04f 0900 	mov.w	r9, #0
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f98a 	bl	8005dca <_Bfree>
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	f43f aeb7 	beq.w	800582a <_dtoa_r+0x67a>
 8005abc:	f1b9 0f00 	cmp.w	r9, #0
 8005ac0:	d005      	beq.n	8005ace <_dtoa_r+0x91e>
 8005ac2:	45b1      	cmp	r9, r6
 8005ac4:	d003      	beq.n	8005ace <_dtoa_r+0x91e>
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 f97e 	bl	8005dca <_Bfree>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 f97a 	bl	8005dca <_Bfree>
 8005ad6:	e6a8      	b.n	800582a <_dtoa_r+0x67a>
 8005ad8:	2700      	movs	r7, #0
 8005ada:	463e      	mov	r6, r7
 8005adc:	e7e1      	b.n	8005aa2 <_dtoa_r+0x8f2>
 8005ade:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ae2:	463e      	mov	r6, r7
 8005ae4:	e5a9      	b.n	800563a <_dtoa_r+0x48a>
 8005ae6:	bf00      	nop
 8005ae8:	40240000 	.word	0x40240000
 8005aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aee:	f8cd 9008 	str.w	r9, [sp, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80fa 	beq.w	8005cec <_dtoa_r+0xb3c>
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	dd05      	ble.n	8005b08 <_dtoa_r+0x958>
 8005afc:	4631      	mov	r1, r6
 8005afe:	462a      	mov	r2, r5
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 faef 	bl	80060e4 <__lshift>
 8005b06:	4606      	mov	r6, r0
 8005b08:	9b07      	ldr	r3, [sp, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d04c      	beq.n	8005ba8 <_dtoa_r+0x9f8>
 8005b0e:	6871      	ldr	r1, [r6, #4]
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 f926 	bl	8005d62 <_Balloc>
 8005b16:	6932      	ldr	r2, [r6, #16]
 8005b18:	3202      	adds	r2, #2
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	0092      	lsls	r2, r2, #2
 8005b1e:	f106 010c 	add.w	r1, r6, #12
 8005b22:	300c      	adds	r0, #12
 8005b24:	f000 f912 	bl	8005d4c <memcpy>
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fad9 	bl	80060e4 <__lshift>
 8005b32:	9b00      	ldr	r3, [sp, #0]
 8005b34:	f8cd b014 	str.w	fp, [sp, #20]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	46b1      	mov	r9, r6
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	4606      	mov	r6, r0
 8005b42:	4639      	mov	r1, r7
 8005b44:	9804      	ldr	r0, [sp, #16]
 8005b46:	f7ff faa7 	bl	8005098 <quorem>
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b52:	9804      	ldr	r0, [sp, #16]
 8005b54:	f000 fb1a 	bl	800618c <__mcmp>
 8005b58:	4632      	mov	r2, r6
 8005b5a:	9000      	str	r0, [sp, #0]
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 fb2e 	bl	80061c0 <__mdiff>
 8005b64:	68c3      	ldr	r3, [r0, #12]
 8005b66:	4602      	mov	r2, r0
 8005b68:	bb03      	cbnz	r3, 8005bac <_dtoa_r+0x9fc>
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	9008      	str	r0, [sp, #32]
 8005b6e:	9804      	ldr	r0, [sp, #16]
 8005b70:	f000 fb0c 	bl	800618c <__mcmp>
 8005b74:	9a08      	ldr	r2, [sp, #32]
 8005b76:	4603      	mov	r3, r0
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	9308      	str	r3, [sp, #32]
 8005b7e:	f000 f924 	bl	8005dca <_Bfree>
 8005b82:	9b08      	ldr	r3, [sp, #32]
 8005b84:	b9a3      	cbnz	r3, 8005bb0 <_dtoa_r+0xa00>
 8005b86:	9a06      	ldr	r2, [sp, #24]
 8005b88:	b992      	cbnz	r2, 8005bb0 <_dtoa_r+0xa00>
 8005b8a:	9a07      	ldr	r2, [sp, #28]
 8005b8c:	b982      	cbnz	r2, 8005bb0 <_dtoa_r+0xa00>
 8005b8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b92:	d029      	beq.n	8005be8 <_dtoa_r+0xa38>
 8005b94:	9b00      	ldr	r3, [sp, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd01      	ble.n	8005b9e <_dtoa_r+0x9ee>
 8005b9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005b9e:	9b05      	ldr	r3, [sp, #20]
 8005ba0:	1c5d      	adds	r5, r3, #1
 8005ba2:	f883 8000 	strb.w	r8, [r3]
 8005ba6:	e782      	b.n	8005aae <_dtoa_r+0x8fe>
 8005ba8:	4630      	mov	r0, r6
 8005baa:	e7c2      	b.n	8005b32 <_dtoa_r+0x982>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7e3      	b.n	8005b78 <_dtoa_r+0x9c8>
 8005bb0:	9a00      	ldr	r2, [sp, #0]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	db04      	blt.n	8005bc0 <_dtoa_r+0xa10>
 8005bb6:	d125      	bne.n	8005c04 <_dtoa_r+0xa54>
 8005bb8:	9a06      	ldr	r2, [sp, #24]
 8005bba:	bb1a      	cbnz	r2, 8005c04 <_dtoa_r+0xa54>
 8005bbc:	9a07      	ldr	r2, [sp, #28]
 8005bbe:	bb0a      	cbnz	r2, 8005c04 <_dtoa_r+0xa54>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	ddec      	ble.n	8005b9e <_dtoa_r+0x9ee>
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	9904      	ldr	r1, [sp, #16]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fa8b 	bl	80060e4 <__lshift>
 8005bce:	4639      	mov	r1, r7
 8005bd0:	9004      	str	r0, [sp, #16]
 8005bd2:	f000 fadb 	bl	800618c <__mcmp>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	dc03      	bgt.n	8005be2 <_dtoa_r+0xa32>
 8005bda:	d1e0      	bne.n	8005b9e <_dtoa_r+0x9ee>
 8005bdc:	f018 0f01 	tst.w	r8, #1
 8005be0:	d0dd      	beq.n	8005b9e <_dtoa_r+0x9ee>
 8005be2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005be6:	d1d8      	bne.n	8005b9a <_dtoa_r+0x9ea>
 8005be8:	9b05      	ldr	r3, [sp, #20]
 8005bea:	9a05      	ldr	r2, [sp, #20]
 8005bec:	1c5d      	adds	r5, r3, #1
 8005bee:	2339      	movs	r3, #57	; 0x39
 8005bf0:	7013      	strb	r3, [r2, #0]
 8005bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bf6:	2b39      	cmp	r3, #57	; 0x39
 8005bf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bfc:	d04f      	beq.n	8005c9e <_dtoa_r+0xaee>
 8005bfe:	3301      	adds	r3, #1
 8005c00:	7013      	strb	r3, [r2, #0]
 8005c02:	e754      	b.n	8005aae <_dtoa_r+0x8fe>
 8005c04:	9a05      	ldr	r2, [sp, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f102 0501 	add.w	r5, r2, #1
 8005c0c:	dd06      	ble.n	8005c1c <_dtoa_r+0xa6c>
 8005c0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c12:	d0e9      	beq.n	8005be8 <_dtoa_r+0xa38>
 8005c14:	f108 0801 	add.w	r8, r8, #1
 8005c18:	9b05      	ldr	r3, [sp, #20]
 8005c1a:	e7c2      	b.n	8005ba2 <_dtoa_r+0x9f2>
 8005c1c:	9a02      	ldr	r2, [sp, #8]
 8005c1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c22:	eba5 030b 	sub.w	r3, r5, fp
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d021      	beq.n	8005c6e <_dtoa_r+0xabe>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	220a      	movs	r2, #10
 8005c2e:	9904      	ldr	r1, [sp, #16]
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 f8e1 	bl	8005df8 <__multadd>
 8005c36:	45b1      	cmp	r9, r6
 8005c38:	9004      	str	r0, [sp, #16]
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	f04f 020a 	mov.w	r2, #10
 8005c42:	4649      	mov	r1, r9
 8005c44:	4620      	mov	r0, r4
 8005c46:	d105      	bne.n	8005c54 <_dtoa_r+0xaa4>
 8005c48:	f000 f8d6 	bl	8005df8 <__multadd>
 8005c4c:	4681      	mov	r9, r0
 8005c4e:	4606      	mov	r6, r0
 8005c50:	9505      	str	r5, [sp, #20]
 8005c52:	e776      	b.n	8005b42 <_dtoa_r+0x992>
 8005c54:	f000 f8d0 	bl	8005df8 <__multadd>
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4681      	mov	r9, r0
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	220a      	movs	r2, #10
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f8c9 	bl	8005df8 <__multadd>
 8005c66:	4606      	mov	r6, r0
 8005c68:	e7f2      	b.n	8005c50 <_dtoa_r+0xaa0>
 8005c6a:	f04f 0900 	mov.w	r9, #0
 8005c6e:	2201      	movs	r2, #1
 8005c70:	9904      	ldr	r1, [sp, #16]
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 fa36 	bl	80060e4 <__lshift>
 8005c78:	4639      	mov	r1, r7
 8005c7a:	9004      	str	r0, [sp, #16]
 8005c7c:	f000 fa86 	bl	800618c <__mcmp>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dcb6      	bgt.n	8005bf2 <_dtoa_r+0xa42>
 8005c84:	d102      	bne.n	8005c8c <_dtoa_r+0xadc>
 8005c86:	f018 0f01 	tst.w	r8, #1
 8005c8a:	d1b2      	bne.n	8005bf2 <_dtoa_r+0xa42>
 8005c8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c90:	2b30      	cmp	r3, #48	; 0x30
 8005c92:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c96:	f47f af0a 	bne.w	8005aae <_dtoa_r+0x8fe>
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	e7f6      	b.n	8005c8c <_dtoa_r+0xadc>
 8005c9e:	4593      	cmp	fp, r2
 8005ca0:	d105      	bne.n	8005cae <_dtoa_r+0xafe>
 8005ca2:	2331      	movs	r3, #49	; 0x31
 8005ca4:	f10a 0a01 	add.w	sl, sl, #1
 8005ca8:	f88b 3000 	strb.w	r3, [fp]
 8005cac:	e6ff      	b.n	8005aae <_dtoa_r+0x8fe>
 8005cae:	4615      	mov	r5, r2
 8005cb0:	e79f      	b.n	8005bf2 <_dtoa_r+0xa42>
 8005cb2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005d18 <_dtoa_r+0xb68>
 8005cb6:	e007      	b.n	8005cc8 <_dtoa_r+0xb18>
 8005cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005d1c <_dtoa_r+0xb6c>
 8005cbe:	b11b      	cbz	r3, 8005cc8 <_dtoa_r+0xb18>
 8005cc0:	f10b 0308 	add.w	r3, fp, #8
 8005cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4658      	mov	r0, fp
 8005cca:	b017      	add	sp, #92	; 0x5c
 8005ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd0:	9b06      	ldr	r3, [sp, #24]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	f77f ae35 	ble.w	8005942 <_dtoa_r+0x792>
 8005cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cda:	9307      	str	r3, [sp, #28]
 8005cdc:	e649      	b.n	8005972 <_dtoa_r+0x7c2>
 8005cde:	9b02      	ldr	r3, [sp, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc03      	bgt.n	8005cec <_dtoa_r+0xb3c>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	f73f aecc 	bgt.w	8005a84 <_dtoa_r+0x8d4>
 8005cec:	465d      	mov	r5, fp
 8005cee:	4639      	mov	r1, r7
 8005cf0:	9804      	ldr	r0, [sp, #16]
 8005cf2:	f7ff f9d1 	bl	8005098 <quorem>
 8005cf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cfa:	f805 8b01 	strb.w	r8, [r5], #1
 8005cfe:	9a02      	ldr	r2, [sp, #8]
 8005d00:	eba5 030b 	sub.w	r3, r5, fp
 8005d04:	429a      	cmp	r2, r3
 8005d06:	ddb0      	ble.n	8005c6a <_dtoa_r+0xaba>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	220a      	movs	r2, #10
 8005d0c:	9904      	ldr	r1, [sp, #16]
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f000 f872 	bl	8005df8 <__multadd>
 8005d14:	9004      	str	r0, [sp, #16]
 8005d16:	e7ea      	b.n	8005cee <_dtoa_r+0xb3e>
 8005d18:	0800688c 	.word	0x0800688c
 8005d1c:	080068b0 	.word	0x080068b0

08005d20 <_localeconv_r>:
 8005d20:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <_localeconv_r+0x14>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6a18      	ldr	r0, [r3, #32]
 8005d26:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <_localeconv_r+0x18>)
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	bf08      	it	eq
 8005d2c:	4618      	moveq	r0, r3
 8005d2e:	30f0      	adds	r0, #240	; 0xf0
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2000000c 	.word	0x2000000c
 8005d38:	20000070 	.word	0x20000070

08005d3c <malloc>:
 8005d3c:	4b02      	ldr	r3, [pc, #8]	; (8005d48 <malloc+0xc>)
 8005d3e:	4601      	mov	r1, r0
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	f000 bb45 	b.w	80063d0 <_malloc_r>
 8005d46:	bf00      	nop
 8005d48:	2000000c 	.word	0x2000000c

08005d4c <memcpy>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	1e43      	subs	r3, r0, #1
 8005d50:	440a      	add	r2, r1
 8005d52:	4291      	cmp	r1, r2
 8005d54:	d100      	bne.n	8005d58 <memcpy+0xc>
 8005d56:	bd10      	pop	{r4, pc}
 8005d58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d60:	e7f7      	b.n	8005d52 <memcpy+0x6>

08005d62 <_Balloc>:
 8005d62:	b570      	push	{r4, r5, r6, lr}
 8005d64:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d66:	4604      	mov	r4, r0
 8005d68:	460e      	mov	r6, r1
 8005d6a:	b93d      	cbnz	r5, 8005d7c <_Balloc+0x1a>
 8005d6c:	2010      	movs	r0, #16
 8005d6e:	f7ff ffe5 	bl	8005d3c <malloc>
 8005d72:	6260      	str	r0, [r4, #36]	; 0x24
 8005d74:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d78:	6005      	str	r5, [r0, #0]
 8005d7a:	60c5      	str	r5, [r0, #12]
 8005d7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d7e:	68eb      	ldr	r3, [r5, #12]
 8005d80:	b183      	cbz	r3, 8005da4 <_Balloc+0x42>
 8005d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d8a:	b9b8      	cbnz	r0, 8005dbc <_Balloc+0x5a>
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f506 	lsl.w	r5, r1, r6
 8005d92:	1d6a      	adds	r2, r5, #5
 8005d94:	0092      	lsls	r2, r2, #2
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 fabe 	bl	8006318 <_calloc_r>
 8005d9c:	b160      	cbz	r0, 8005db8 <_Balloc+0x56>
 8005d9e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005da2:	e00e      	b.n	8005dc2 <_Balloc+0x60>
 8005da4:	2221      	movs	r2, #33	; 0x21
 8005da6:	2104      	movs	r1, #4
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fab5 	bl	8006318 <_calloc_r>
 8005dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db0:	60e8      	str	r0, [r5, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e4      	bne.n	8005d82 <_Balloc+0x20>
 8005db8:	2000      	movs	r0, #0
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	6802      	ldr	r2, [r0, #0]
 8005dbe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dc8:	e7f7      	b.n	8005dba <_Balloc+0x58>

08005dca <_Bfree>:
 8005dca:	b570      	push	{r4, r5, r6, lr}
 8005dcc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	b93c      	cbnz	r4, 8005de4 <_Bfree+0x1a>
 8005dd4:	2010      	movs	r0, #16
 8005dd6:	f7ff ffb1 	bl	8005d3c <malloc>
 8005dda:	6270      	str	r0, [r6, #36]	; 0x24
 8005ddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005de0:	6004      	str	r4, [r0, #0]
 8005de2:	60c4      	str	r4, [r0, #12]
 8005de4:	b13d      	cbz	r5, 8005df6 <_Bfree+0x2c>
 8005de6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005de8:	686a      	ldr	r2, [r5, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005df0:	6029      	str	r1, [r5, #0]
 8005df2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005df6:	bd70      	pop	{r4, r5, r6, pc}

08005df8 <__multadd>:
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	690d      	ldr	r5, [r1, #16]
 8005dfe:	461f      	mov	r7, r3
 8005e00:	4606      	mov	r6, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	f101 0c14 	add.w	ip, r1, #20
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f8dc 0000 	ldr.w	r0, [ip]
 8005e0e:	b281      	uxth	r1, r0
 8005e10:	fb02 7101 	mla	r1, r2, r1, r7
 8005e14:	0c0f      	lsrs	r7, r1, #16
 8005e16:	0c00      	lsrs	r0, r0, #16
 8005e18:	fb02 7000 	mla	r0, r2, r0, r7
 8005e1c:	b289      	uxth	r1, r1
 8005e1e:	3301      	adds	r3, #1
 8005e20:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e24:	429d      	cmp	r5, r3
 8005e26:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e2e:	dcec      	bgt.n	8005e0a <__multadd+0x12>
 8005e30:	b1d7      	cbz	r7, 8005e68 <__multadd+0x70>
 8005e32:	68a3      	ldr	r3, [r4, #8]
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	dc12      	bgt.n	8005e5e <__multadd+0x66>
 8005e38:	6861      	ldr	r1, [r4, #4]
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	3101      	adds	r1, #1
 8005e3e:	f7ff ff90 	bl	8005d62 <_Balloc>
 8005e42:	6922      	ldr	r2, [r4, #16]
 8005e44:	3202      	adds	r2, #2
 8005e46:	f104 010c 	add.w	r1, r4, #12
 8005e4a:	4680      	mov	r8, r0
 8005e4c:	0092      	lsls	r2, r2, #2
 8005e4e:	300c      	adds	r0, #12
 8005e50:	f7ff ff7c 	bl	8005d4c <memcpy>
 8005e54:	4621      	mov	r1, r4
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ffb7 	bl	8005dca <_Bfree>
 8005e5c:	4644      	mov	r4, r8
 8005e5e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e62:	3501      	adds	r5, #1
 8005e64:	615f      	str	r7, [r3, #20]
 8005e66:	6125      	str	r5, [r4, #16]
 8005e68:	4620      	mov	r0, r4
 8005e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e6e <__hi0bits>:
 8005e6e:	0c02      	lsrs	r2, r0, #16
 8005e70:	0412      	lsls	r2, r2, #16
 8005e72:	4603      	mov	r3, r0
 8005e74:	b9b2      	cbnz	r2, 8005ea4 <__hi0bits+0x36>
 8005e76:	0403      	lsls	r3, r0, #16
 8005e78:	2010      	movs	r0, #16
 8005e7a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e7e:	bf04      	itt	eq
 8005e80:	021b      	lsleq	r3, r3, #8
 8005e82:	3008      	addeq	r0, #8
 8005e84:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e88:	bf04      	itt	eq
 8005e8a:	011b      	lsleq	r3, r3, #4
 8005e8c:	3004      	addeq	r0, #4
 8005e8e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e92:	bf04      	itt	eq
 8005e94:	009b      	lsleq	r3, r3, #2
 8005e96:	3002      	addeq	r0, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	db06      	blt.n	8005eaa <__hi0bits+0x3c>
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	d503      	bpl.n	8005ea8 <__hi0bits+0x3a>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	4770      	bx	lr
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e7e8      	b.n	8005e7a <__hi0bits+0xc>
 8005ea8:	2020      	movs	r0, #32
 8005eaa:	4770      	bx	lr

08005eac <__lo0bits>:
 8005eac:	6803      	ldr	r3, [r0, #0]
 8005eae:	f013 0207 	ands.w	r2, r3, #7
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	d00b      	beq.n	8005ece <__lo0bits+0x22>
 8005eb6:	07da      	lsls	r2, r3, #31
 8005eb8:	d423      	bmi.n	8005f02 <__lo0bits+0x56>
 8005eba:	0798      	lsls	r0, r3, #30
 8005ebc:	bf49      	itett	mi
 8005ebe:	085b      	lsrmi	r3, r3, #1
 8005ec0:	089b      	lsrpl	r3, r3, #2
 8005ec2:	2001      	movmi	r0, #1
 8005ec4:	600b      	strmi	r3, [r1, #0]
 8005ec6:	bf5c      	itt	pl
 8005ec8:	600b      	strpl	r3, [r1, #0]
 8005eca:	2002      	movpl	r0, #2
 8005ecc:	4770      	bx	lr
 8005ece:	b298      	uxth	r0, r3
 8005ed0:	b9a8      	cbnz	r0, 8005efe <__lo0bits+0x52>
 8005ed2:	0c1b      	lsrs	r3, r3, #16
 8005ed4:	2010      	movs	r0, #16
 8005ed6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005eda:	bf04      	itt	eq
 8005edc:	0a1b      	lsreq	r3, r3, #8
 8005ede:	3008      	addeq	r0, #8
 8005ee0:	071a      	lsls	r2, r3, #28
 8005ee2:	bf04      	itt	eq
 8005ee4:	091b      	lsreq	r3, r3, #4
 8005ee6:	3004      	addeq	r0, #4
 8005ee8:	079a      	lsls	r2, r3, #30
 8005eea:	bf04      	itt	eq
 8005eec:	089b      	lsreq	r3, r3, #2
 8005eee:	3002      	addeq	r0, #2
 8005ef0:	07da      	lsls	r2, r3, #31
 8005ef2:	d402      	bmi.n	8005efa <__lo0bits+0x4e>
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	d006      	beq.n	8005f06 <__lo0bits+0x5a>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	600b      	str	r3, [r1, #0]
 8005efc:	4770      	bx	lr
 8005efe:	4610      	mov	r0, r2
 8005f00:	e7e9      	b.n	8005ed6 <__lo0bits+0x2a>
 8005f02:	2000      	movs	r0, #0
 8005f04:	4770      	bx	lr
 8005f06:	2020      	movs	r0, #32
 8005f08:	4770      	bx	lr

08005f0a <__i2b>:
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	2101      	movs	r1, #1
 8005f10:	f7ff ff27 	bl	8005d62 <_Balloc>
 8005f14:	2201      	movs	r2, #1
 8005f16:	6144      	str	r4, [r0, #20]
 8005f18:	6102      	str	r2, [r0, #16]
 8005f1a:	bd10      	pop	{r4, pc}

08005f1c <__multiply>:
 8005f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	4614      	mov	r4, r2
 8005f22:	690a      	ldr	r2, [r1, #16]
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bfb8      	it	lt
 8005f2a:	460b      	movlt	r3, r1
 8005f2c:	4688      	mov	r8, r1
 8005f2e:	bfbc      	itt	lt
 8005f30:	46a0      	movlt	r8, r4
 8005f32:	461c      	movlt	r4, r3
 8005f34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f44:	eb07 0609 	add.w	r6, r7, r9
 8005f48:	42b3      	cmp	r3, r6
 8005f4a:	bfb8      	it	lt
 8005f4c:	3101      	addlt	r1, #1
 8005f4e:	f7ff ff08 	bl	8005d62 <_Balloc>
 8005f52:	f100 0514 	add.w	r5, r0, #20
 8005f56:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f5a:	462b      	mov	r3, r5
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4573      	cmp	r3, lr
 8005f60:	d316      	bcc.n	8005f90 <__multiply+0x74>
 8005f62:	f104 0214 	add.w	r2, r4, #20
 8005f66:	f108 0114 	add.w	r1, r8, #20
 8005f6a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f6e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	9201      	str	r2, [sp, #4]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d80c      	bhi.n	8005f96 <__multiply+0x7a>
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	dd03      	ble.n	8005f88 <__multiply+0x6c>
 8005f80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d05d      	beq.n	8006044 <__multiply+0x128>
 8005f88:	6106      	str	r6, [r0, #16]
 8005f8a:	b003      	add	sp, #12
 8005f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f90:	f843 2b04 	str.w	r2, [r3], #4
 8005f94:	e7e3      	b.n	8005f5e <__multiply+0x42>
 8005f96:	f8b2 b000 	ldrh.w	fp, [r2]
 8005f9a:	f1bb 0f00 	cmp.w	fp, #0
 8005f9e:	d023      	beq.n	8005fe8 <__multiply+0xcc>
 8005fa0:	4689      	mov	r9, r1
 8005fa2:	46ac      	mov	ip, r5
 8005fa4:	f04f 0800 	mov.w	r8, #0
 8005fa8:	f859 4b04 	ldr.w	r4, [r9], #4
 8005fac:	f8dc a000 	ldr.w	sl, [ip]
 8005fb0:	b2a3      	uxth	r3, r4
 8005fb2:	fa1f fa8a 	uxth.w	sl, sl
 8005fb6:	fb0b a303 	mla	r3, fp, r3, sl
 8005fba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005fbe:	f8dc 4000 	ldr.w	r4, [ip]
 8005fc2:	4443      	add	r3, r8
 8005fc4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fc8:	fb0b 840a 	mla	r4, fp, sl, r8
 8005fcc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005fd0:	46e2      	mov	sl, ip
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fd8:	454f      	cmp	r7, r9
 8005fda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fde:	f84a 3b04 	str.w	r3, [sl], #4
 8005fe2:	d82b      	bhi.n	800603c <__multiply+0x120>
 8005fe4:	f8cc 8004 	str.w	r8, [ip, #4]
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005fee:	3204      	adds	r2, #4
 8005ff0:	f1ba 0f00 	cmp.w	sl, #0
 8005ff4:	d020      	beq.n	8006038 <__multiply+0x11c>
 8005ff6:	682b      	ldr	r3, [r5, #0]
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	46a8      	mov	r8, r5
 8005ffc:	f04f 0b00 	mov.w	fp, #0
 8006000:	f8b9 c000 	ldrh.w	ip, [r9]
 8006004:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006008:	fb0a 440c 	mla	r4, sl, ip, r4
 800600c:	445c      	add	r4, fp
 800600e:	46c4      	mov	ip, r8
 8006010:	b29b      	uxth	r3, r3
 8006012:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006016:	f84c 3b04 	str.w	r3, [ip], #4
 800601a:	f859 3b04 	ldr.w	r3, [r9], #4
 800601e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	fb0a b303 	mla	r3, sl, r3, fp
 8006028:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800602c:	454f      	cmp	r7, r9
 800602e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006032:	d805      	bhi.n	8006040 <__multiply+0x124>
 8006034:	f8c8 3004 	str.w	r3, [r8, #4]
 8006038:	3504      	adds	r5, #4
 800603a:	e79b      	b.n	8005f74 <__multiply+0x58>
 800603c:	46d4      	mov	ip, sl
 800603e:	e7b3      	b.n	8005fa8 <__multiply+0x8c>
 8006040:	46e0      	mov	r8, ip
 8006042:	e7dd      	b.n	8006000 <__multiply+0xe4>
 8006044:	3e01      	subs	r6, #1
 8006046:	e799      	b.n	8005f7c <__multiply+0x60>

08006048 <__pow5mult>:
 8006048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800604c:	4615      	mov	r5, r2
 800604e:	f012 0203 	ands.w	r2, r2, #3
 8006052:	4606      	mov	r6, r0
 8006054:	460f      	mov	r7, r1
 8006056:	d007      	beq.n	8006068 <__pow5mult+0x20>
 8006058:	3a01      	subs	r2, #1
 800605a:	4c21      	ldr	r4, [pc, #132]	; (80060e0 <__pow5mult+0x98>)
 800605c:	2300      	movs	r3, #0
 800605e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006062:	f7ff fec9 	bl	8005df8 <__multadd>
 8006066:	4607      	mov	r7, r0
 8006068:	10ad      	asrs	r5, r5, #2
 800606a:	d035      	beq.n	80060d8 <__pow5mult+0x90>
 800606c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800606e:	b93c      	cbnz	r4, 8006080 <__pow5mult+0x38>
 8006070:	2010      	movs	r0, #16
 8006072:	f7ff fe63 	bl	8005d3c <malloc>
 8006076:	6270      	str	r0, [r6, #36]	; 0x24
 8006078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800607c:	6004      	str	r4, [r0, #0]
 800607e:	60c4      	str	r4, [r0, #12]
 8006080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006088:	b94c      	cbnz	r4, 800609e <__pow5mult+0x56>
 800608a:	f240 2171 	movw	r1, #625	; 0x271
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff ff3b 	bl	8005f0a <__i2b>
 8006094:	2300      	movs	r3, #0
 8006096:	f8c8 0008 	str.w	r0, [r8, #8]
 800609a:	4604      	mov	r4, r0
 800609c:	6003      	str	r3, [r0, #0]
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	07eb      	lsls	r3, r5, #31
 80060a4:	d50a      	bpl.n	80060bc <__pow5mult+0x74>
 80060a6:	4639      	mov	r1, r7
 80060a8:	4622      	mov	r2, r4
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ff36 	bl	8005f1c <__multiply>
 80060b0:	4639      	mov	r1, r7
 80060b2:	4681      	mov	r9, r0
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff fe88 	bl	8005dca <_Bfree>
 80060ba:	464f      	mov	r7, r9
 80060bc:	106d      	asrs	r5, r5, #1
 80060be:	d00b      	beq.n	80060d8 <__pow5mult+0x90>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	b938      	cbnz	r0, 80060d4 <__pow5mult+0x8c>
 80060c4:	4622      	mov	r2, r4
 80060c6:	4621      	mov	r1, r4
 80060c8:	4630      	mov	r0, r6
 80060ca:	f7ff ff27 	bl	8005f1c <__multiply>
 80060ce:	6020      	str	r0, [r4, #0]
 80060d0:	f8c0 8000 	str.w	r8, [r0]
 80060d4:	4604      	mov	r4, r0
 80060d6:	e7e4      	b.n	80060a2 <__pow5mult+0x5a>
 80060d8:	4638      	mov	r0, r7
 80060da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060de:	bf00      	nop
 80060e0:	080069b0 	.word	0x080069b0

080060e4 <__lshift>:
 80060e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e8:	460c      	mov	r4, r1
 80060ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060ee:	6923      	ldr	r3, [r4, #16]
 80060f0:	6849      	ldr	r1, [r1, #4]
 80060f2:	eb0a 0903 	add.w	r9, sl, r3
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	4607      	mov	r7, r0
 80060fa:	4616      	mov	r6, r2
 80060fc:	f109 0501 	add.w	r5, r9, #1
 8006100:	42ab      	cmp	r3, r5
 8006102:	db32      	blt.n	800616a <__lshift+0x86>
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff fe2c 	bl	8005d62 <_Balloc>
 800610a:	2300      	movs	r3, #0
 800610c:	4680      	mov	r8, r0
 800610e:	f100 0114 	add.w	r1, r0, #20
 8006112:	461a      	mov	r2, r3
 8006114:	4553      	cmp	r3, sl
 8006116:	db2b      	blt.n	8006170 <__lshift+0x8c>
 8006118:	6920      	ldr	r0, [r4, #16]
 800611a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800611e:	f104 0314 	add.w	r3, r4, #20
 8006122:	f016 021f 	ands.w	r2, r6, #31
 8006126:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800612a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800612e:	d025      	beq.n	800617c <__lshift+0x98>
 8006130:	f1c2 0e20 	rsb	lr, r2, #32
 8006134:	2000      	movs	r0, #0
 8006136:	681e      	ldr	r6, [r3, #0]
 8006138:	468a      	mov	sl, r1
 800613a:	4096      	lsls	r6, r2
 800613c:	4330      	orrs	r0, r6
 800613e:	f84a 0b04 	str.w	r0, [sl], #4
 8006142:	f853 0b04 	ldr.w	r0, [r3], #4
 8006146:	459c      	cmp	ip, r3
 8006148:	fa20 f00e 	lsr.w	r0, r0, lr
 800614c:	d814      	bhi.n	8006178 <__lshift+0x94>
 800614e:	6048      	str	r0, [r1, #4]
 8006150:	b108      	cbz	r0, 8006156 <__lshift+0x72>
 8006152:	f109 0502 	add.w	r5, r9, #2
 8006156:	3d01      	subs	r5, #1
 8006158:	4638      	mov	r0, r7
 800615a:	f8c8 5010 	str.w	r5, [r8, #16]
 800615e:	4621      	mov	r1, r4
 8006160:	f7ff fe33 	bl	8005dca <_Bfree>
 8006164:	4640      	mov	r0, r8
 8006166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616a:	3101      	adds	r1, #1
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	e7c7      	b.n	8006100 <__lshift+0x1c>
 8006170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006174:	3301      	adds	r3, #1
 8006176:	e7cd      	b.n	8006114 <__lshift+0x30>
 8006178:	4651      	mov	r1, sl
 800617a:	e7dc      	b.n	8006136 <__lshift+0x52>
 800617c:	3904      	subs	r1, #4
 800617e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006182:	f841 2f04 	str.w	r2, [r1, #4]!
 8006186:	459c      	cmp	ip, r3
 8006188:	d8f9      	bhi.n	800617e <__lshift+0x9a>
 800618a:	e7e4      	b.n	8006156 <__lshift+0x72>

0800618c <__mcmp>:
 800618c:	6903      	ldr	r3, [r0, #16]
 800618e:	690a      	ldr	r2, [r1, #16]
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	b530      	push	{r4, r5, lr}
 8006194:	d10c      	bne.n	80061b0 <__mcmp+0x24>
 8006196:	0092      	lsls	r2, r2, #2
 8006198:	3014      	adds	r0, #20
 800619a:	3114      	adds	r1, #20
 800619c:	1884      	adds	r4, r0, r2
 800619e:	4411      	add	r1, r2
 80061a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061a8:	4295      	cmp	r5, r2
 80061aa:	d003      	beq.n	80061b4 <__mcmp+0x28>
 80061ac:	d305      	bcc.n	80061ba <__mcmp+0x2e>
 80061ae:	2301      	movs	r3, #1
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd30      	pop	{r4, r5, pc}
 80061b4:	42a0      	cmp	r0, r4
 80061b6:	d3f3      	bcc.n	80061a0 <__mcmp+0x14>
 80061b8:	e7fa      	b.n	80061b0 <__mcmp+0x24>
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	e7f7      	b.n	80061b0 <__mcmp+0x24>

080061c0 <__mdiff>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	460d      	mov	r5, r1
 80061c6:	4607      	mov	r7, r0
 80061c8:	4611      	mov	r1, r2
 80061ca:	4628      	mov	r0, r5
 80061cc:	4614      	mov	r4, r2
 80061ce:	f7ff ffdd 	bl	800618c <__mcmp>
 80061d2:	1e06      	subs	r6, r0, #0
 80061d4:	d108      	bne.n	80061e8 <__mdiff+0x28>
 80061d6:	4631      	mov	r1, r6
 80061d8:	4638      	mov	r0, r7
 80061da:	f7ff fdc2 	bl	8005d62 <_Balloc>
 80061de:	2301      	movs	r3, #1
 80061e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	bfa4      	itt	ge
 80061ea:	4623      	movge	r3, r4
 80061ec:	462c      	movge	r4, r5
 80061ee:	4638      	mov	r0, r7
 80061f0:	6861      	ldr	r1, [r4, #4]
 80061f2:	bfa6      	itte	ge
 80061f4:	461d      	movge	r5, r3
 80061f6:	2600      	movge	r6, #0
 80061f8:	2601      	movlt	r6, #1
 80061fa:	f7ff fdb2 	bl	8005d62 <_Balloc>
 80061fe:	692b      	ldr	r3, [r5, #16]
 8006200:	60c6      	str	r6, [r0, #12]
 8006202:	6926      	ldr	r6, [r4, #16]
 8006204:	f105 0914 	add.w	r9, r5, #20
 8006208:	f104 0214 	add.w	r2, r4, #20
 800620c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006210:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006214:	f100 0514 	add.w	r5, r0, #20
 8006218:	f04f 0e00 	mov.w	lr, #0
 800621c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006220:	f859 4b04 	ldr.w	r4, [r9], #4
 8006224:	fa1e f18a 	uxtah	r1, lr, sl
 8006228:	b2a3      	uxth	r3, r4
 800622a:	1ac9      	subs	r1, r1, r3
 800622c:	0c23      	lsrs	r3, r4, #16
 800622e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006232:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006236:	b289      	uxth	r1, r1
 8006238:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800623c:	45c8      	cmp	r8, r9
 800623e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006242:	4694      	mov	ip, r2
 8006244:	f845 3b04 	str.w	r3, [r5], #4
 8006248:	d8e8      	bhi.n	800621c <__mdiff+0x5c>
 800624a:	45bc      	cmp	ip, r7
 800624c:	d304      	bcc.n	8006258 <__mdiff+0x98>
 800624e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006252:	b183      	cbz	r3, 8006276 <__mdiff+0xb6>
 8006254:	6106      	str	r6, [r0, #16]
 8006256:	e7c5      	b.n	80061e4 <__mdiff+0x24>
 8006258:	f85c 1b04 	ldr.w	r1, [ip], #4
 800625c:	fa1e f381 	uxtah	r3, lr, r1
 8006260:	141a      	asrs	r2, r3, #16
 8006262:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006266:	b29b      	uxth	r3, r3
 8006268:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800626c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006270:	f845 3b04 	str.w	r3, [r5], #4
 8006274:	e7e9      	b.n	800624a <__mdiff+0x8a>
 8006276:	3e01      	subs	r6, #1
 8006278:	e7e9      	b.n	800624e <__mdiff+0x8e>

0800627a <__d2b>:
 800627a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800627e:	460e      	mov	r6, r1
 8006280:	2101      	movs	r1, #1
 8006282:	ec59 8b10 	vmov	r8, r9, d0
 8006286:	4615      	mov	r5, r2
 8006288:	f7ff fd6b 	bl	8005d62 <_Balloc>
 800628c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006290:	4607      	mov	r7, r0
 8006292:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006296:	bb34      	cbnz	r4, 80062e6 <__d2b+0x6c>
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	f1b8 0300 	subs.w	r3, r8, #0
 800629e:	d027      	beq.n	80062f0 <__d2b+0x76>
 80062a0:	a802      	add	r0, sp, #8
 80062a2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80062a6:	f7ff fe01 	bl	8005eac <__lo0bits>
 80062aa:	9900      	ldr	r1, [sp, #0]
 80062ac:	b1f0      	cbz	r0, 80062ec <__d2b+0x72>
 80062ae:	9a01      	ldr	r2, [sp, #4]
 80062b0:	f1c0 0320 	rsb	r3, r0, #32
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	430b      	orrs	r3, r1
 80062ba:	40c2      	lsrs	r2, r0
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	9201      	str	r2, [sp, #4]
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	61bb      	str	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bf14      	ite	ne
 80062c8:	2102      	movne	r1, #2
 80062ca:	2101      	moveq	r1, #1
 80062cc:	6139      	str	r1, [r7, #16]
 80062ce:	b1c4      	cbz	r4, 8006302 <__d2b+0x88>
 80062d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80062d4:	4404      	add	r4, r0
 80062d6:	6034      	str	r4, [r6, #0]
 80062d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062dc:	6028      	str	r0, [r5, #0]
 80062de:	4638      	mov	r0, r7
 80062e0:	b003      	add	sp, #12
 80062e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ea:	e7d5      	b.n	8006298 <__d2b+0x1e>
 80062ec:	6179      	str	r1, [r7, #20]
 80062ee:	e7e7      	b.n	80062c0 <__d2b+0x46>
 80062f0:	a801      	add	r0, sp, #4
 80062f2:	f7ff fddb 	bl	8005eac <__lo0bits>
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	2101      	movs	r1, #1
 80062fc:	6139      	str	r1, [r7, #16]
 80062fe:	3020      	adds	r0, #32
 8006300:	e7e5      	b.n	80062ce <__d2b+0x54>
 8006302:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006306:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800630a:	6030      	str	r0, [r6, #0]
 800630c:	6918      	ldr	r0, [r3, #16]
 800630e:	f7ff fdae 	bl	8005e6e <__hi0bits>
 8006312:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006316:	e7e1      	b.n	80062dc <__d2b+0x62>

08006318 <_calloc_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	fb02 f401 	mul.w	r4, r2, r1
 800631e:	4621      	mov	r1, r4
 8006320:	f000 f856 	bl	80063d0 <_malloc_r>
 8006324:	4605      	mov	r5, r0
 8006326:	b118      	cbz	r0, 8006330 <_calloc_r+0x18>
 8006328:	4622      	mov	r2, r4
 800632a:	2100      	movs	r1, #0
 800632c:	f7fe fa1c 	bl	8004768 <memset>
 8006330:	4628      	mov	r0, r5
 8006332:	bd38      	pop	{r3, r4, r5, pc}

08006334 <_free_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	d045      	beq.n	80063c8 <_free_r+0x94>
 800633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfb8      	it	lt
 8006346:	18e4      	addlt	r4, r4, r3
 8006348:	f000 fa29 	bl	800679e <__malloc_lock>
 800634c:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <_free_r+0x98>)
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	4610      	mov	r0, r2
 8006352:	b933      	cbnz	r3, 8006362 <_free_r+0x2e>
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	6014      	str	r4, [r2, #0]
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635e:	f000 ba1f 	b.w	80067a0 <__malloc_unlock>
 8006362:	42a3      	cmp	r3, r4
 8006364:	d90c      	bls.n	8006380 <_free_r+0x4c>
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	1862      	adds	r2, r4, r1
 800636a:	4293      	cmp	r3, r2
 800636c:	bf04      	itt	eq
 800636e:	681a      	ldreq	r2, [r3, #0]
 8006370:	685b      	ldreq	r3, [r3, #4]
 8006372:	6063      	str	r3, [r4, #4]
 8006374:	bf04      	itt	eq
 8006376:	1852      	addeq	r2, r2, r1
 8006378:	6022      	streq	r2, [r4, #0]
 800637a:	6004      	str	r4, [r0, #0]
 800637c:	e7ec      	b.n	8006358 <_free_r+0x24>
 800637e:	4613      	mov	r3, r2
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	b10a      	cbz	r2, 8006388 <_free_r+0x54>
 8006384:	42a2      	cmp	r2, r4
 8006386:	d9fa      	bls.n	800637e <_free_r+0x4a>
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	1858      	adds	r0, r3, r1
 800638c:	42a0      	cmp	r0, r4
 800638e:	d10b      	bne.n	80063a8 <_free_r+0x74>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	4401      	add	r1, r0
 8006394:	1858      	adds	r0, r3, r1
 8006396:	4282      	cmp	r2, r0
 8006398:	6019      	str	r1, [r3, #0]
 800639a:	d1dd      	bne.n	8006358 <_free_r+0x24>
 800639c:	6810      	ldr	r0, [r2, #0]
 800639e:	6852      	ldr	r2, [r2, #4]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	4401      	add	r1, r0
 80063a4:	6019      	str	r1, [r3, #0]
 80063a6:	e7d7      	b.n	8006358 <_free_r+0x24>
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x7c>
 80063aa:	230c      	movs	r3, #12
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	e7d3      	b.n	8006358 <_free_r+0x24>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	1821      	adds	r1, r4, r0
 80063b4:	428a      	cmp	r2, r1
 80063b6:	bf04      	itt	eq
 80063b8:	6811      	ldreq	r1, [r2, #0]
 80063ba:	6852      	ldreq	r2, [r2, #4]
 80063bc:	6062      	str	r2, [r4, #4]
 80063be:	bf04      	itt	eq
 80063c0:	1809      	addeq	r1, r1, r0
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	605c      	str	r4, [r3, #4]
 80063c6:	e7c7      	b.n	8006358 <_free_r+0x24>
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
 80063ca:	bf00      	nop
 80063cc:	200001fc 	.word	0x200001fc

080063d0 <_malloc_r>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	1ccd      	adds	r5, r1, #3
 80063d4:	f025 0503 	bic.w	r5, r5, #3
 80063d8:	3508      	adds	r5, #8
 80063da:	2d0c      	cmp	r5, #12
 80063dc:	bf38      	it	cc
 80063de:	250c      	movcc	r5, #12
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	4606      	mov	r6, r0
 80063e4:	db01      	blt.n	80063ea <_malloc_r+0x1a>
 80063e6:	42a9      	cmp	r1, r5
 80063e8:	d903      	bls.n	80063f2 <_malloc_r+0x22>
 80063ea:	230c      	movs	r3, #12
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	2000      	movs	r0, #0
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	f000 f9d4 	bl	800679e <__malloc_lock>
 80063f6:	4a21      	ldr	r2, [pc, #132]	; (800647c <_malloc_r+0xac>)
 80063f8:	6814      	ldr	r4, [r2, #0]
 80063fa:	4621      	mov	r1, r4
 80063fc:	b991      	cbnz	r1, 8006424 <_malloc_r+0x54>
 80063fe:	4c20      	ldr	r4, [pc, #128]	; (8006480 <_malloc_r+0xb0>)
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b91b      	cbnz	r3, 800640c <_malloc_r+0x3c>
 8006404:	4630      	mov	r0, r6
 8006406:	f000 f98f 	bl	8006728 <_sbrk_r>
 800640a:	6020      	str	r0, [r4, #0]
 800640c:	4629      	mov	r1, r5
 800640e:	4630      	mov	r0, r6
 8006410:	f000 f98a 	bl	8006728 <_sbrk_r>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d124      	bne.n	8006462 <_malloc_r+0x92>
 8006418:	230c      	movs	r3, #12
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	4630      	mov	r0, r6
 800641e:	f000 f9bf 	bl	80067a0 <__malloc_unlock>
 8006422:	e7e4      	b.n	80063ee <_malloc_r+0x1e>
 8006424:	680b      	ldr	r3, [r1, #0]
 8006426:	1b5b      	subs	r3, r3, r5
 8006428:	d418      	bmi.n	800645c <_malloc_r+0x8c>
 800642a:	2b0b      	cmp	r3, #11
 800642c:	d90f      	bls.n	800644e <_malloc_r+0x7e>
 800642e:	600b      	str	r3, [r1, #0]
 8006430:	50cd      	str	r5, [r1, r3]
 8006432:	18cc      	adds	r4, r1, r3
 8006434:	4630      	mov	r0, r6
 8006436:	f000 f9b3 	bl	80067a0 <__malloc_unlock>
 800643a:	f104 000b 	add.w	r0, r4, #11
 800643e:	1d23      	adds	r3, r4, #4
 8006440:	f020 0007 	bic.w	r0, r0, #7
 8006444:	1ac3      	subs	r3, r0, r3
 8006446:	d0d3      	beq.n	80063f0 <_malloc_r+0x20>
 8006448:	425a      	negs	r2, r3
 800644a:	50e2      	str	r2, [r4, r3]
 800644c:	e7d0      	b.n	80063f0 <_malloc_r+0x20>
 800644e:	428c      	cmp	r4, r1
 8006450:	684b      	ldr	r3, [r1, #4]
 8006452:	bf16      	itet	ne
 8006454:	6063      	strne	r3, [r4, #4]
 8006456:	6013      	streq	r3, [r2, #0]
 8006458:	460c      	movne	r4, r1
 800645a:	e7eb      	b.n	8006434 <_malloc_r+0x64>
 800645c:	460c      	mov	r4, r1
 800645e:	6849      	ldr	r1, [r1, #4]
 8006460:	e7cc      	b.n	80063fc <_malloc_r+0x2c>
 8006462:	1cc4      	adds	r4, r0, #3
 8006464:	f024 0403 	bic.w	r4, r4, #3
 8006468:	42a0      	cmp	r0, r4
 800646a:	d005      	beq.n	8006478 <_malloc_r+0xa8>
 800646c:	1a21      	subs	r1, r4, r0
 800646e:	4630      	mov	r0, r6
 8006470:	f000 f95a 	bl	8006728 <_sbrk_r>
 8006474:	3001      	adds	r0, #1
 8006476:	d0cf      	beq.n	8006418 <_malloc_r+0x48>
 8006478:	6025      	str	r5, [r4, #0]
 800647a:	e7db      	b.n	8006434 <_malloc_r+0x64>
 800647c:	200001fc 	.word	0x200001fc
 8006480:	20000200 	.word	0x20000200

08006484 <__ssputs_r>:
 8006484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	688e      	ldr	r6, [r1, #8]
 800648a:	429e      	cmp	r6, r3
 800648c:	4682      	mov	sl, r0
 800648e:	460c      	mov	r4, r1
 8006490:	4690      	mov	r8, r2
 8006492:	4699      	mov	r9, r3
 8006494:	d837      	bhi.n	8006506 <__ssputs_r+0x82>
 8006496:	898a      	ldrh	r2, [r1, #12]
 8006498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800649c:	d031      	beq.n	8006502 <__ssputs_r+0x7e>
 800649e:	6825      	ldr	r5, [r4, #0]
 80064a0:	6909      	ldr	r1, [r1, #16]
 80064a2:	1a6f      	subs	r7, r5, r1
 80064a4:	6965      	ldr	r5, [r4, #20]
 80064a6:	2302      	movs	r3, #2
 80064a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80064b0:	f109 0301 	add.w	r3, r9, #1
 80064b4:	443b      	add	r3, r7
 80064b6:	429d      	cmp	r5, r3
 80064b8:	bf38      	it	cc
 80064ba:	461d      	movcc	r5, r3
 80064bc:	0553      	lsls	r3, r2, #21
 80064be:	d530      	bpl.n	8006522 <__ssputs_r+0x9e>
 80064c0:	4629      	mov	r1, r5
 80064c2:	f7ff ff85 	bl	80063d0 <_malloc_r>
 80064c6:	4606      	mov	r6, r0
 80064c8:	b950      	cbnz	r0, 80064e0 <__ssputs_r+0x5c>
 80064ca:	230c      	movs	r3, #12
 80064cc:	f8ca 3000 	str.w	r3, [sl]
 80064d0:	89a3      	ldrh	r3, [r4, #12]
 80064d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	463a      	mov	r2, r7
 80064e2:	6921      	ldr	r1, [r4, #16]
 80064e4:	f7ff fc32 	bl	8005d4c <memcpy>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	6126      	str	r6, [r4, #16]
 80064f6:	6165      	str	r5, [r4, #20]
 80064f8:	443e      	add	r6, r7
 80064fa:	1bed      	subs	r5, r5, r7
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	60a5      	str	r5, [r4, #8]
 8006500:	464e      	mov	r6, r9
 8006502:	454e      	cmp	r6, r9
 8006504:	d900      	bls.n	8006508 <__ssputs_r+0x84>
 8006506:	464e      	mov	r6, r9
 8006508:	4632      	mov	r2, r6
 800650a:	4641      	mov	r1, r8
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	f000 f92d 	bl	800676c <memmove>
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	1b9b      	subs	r3, r3, r6
 8006516:	60a3      	str	r3, [r4, #8]
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	441e      	add	r6, r3
 800651c:	6026      	str	r6, [r4, #0]
 800651e:	2000      	movs	r0, #0
 8006520:	e7dc      	b.n	80064dc <__ssputs_r+0x58>
 8006522:	462a      	mov	r2, r5
 8006524:	f000 f93d 	bl	80067a2 <_realloc_r>
 8006528:	4606      	mov	r6, r0
 800652a:	2800      	cmp	r0, #0
 800652c:	d1e2      	bne.n	80064f4 <__ssputs_r+0x70>
 800652e:	6921      	ldr	r1, [r4, #16]
 8006530:	4650      	mov	r0, sl
 8006532:	f7ff feff 	bl	8006334 <_free_r>
 8006536:	e7c8      	b.n	80064ca <__ssputs_r+0x46>

08006538 <_svfiprintf_r>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	461d      	mov	r5, r3
 800653e:	898b      	ldrh	r3, [r1, #12]
 8006540:	061f      	lsls	r7, r3, #24
 8006542:	b09d      	sub	sp, #116	; 0x74
 8006544:	4680      	mov	r8, r0
 8006546:	460c      	mov	r4, r1
 8006548:	4616      	mov	r6, r2
 800654a:	d50f      	bpl.n	800656c <_svfiprintf_r+0x34>
 800654c:	690b      	ldr	r3, [r1, #16]
 800654e:	b96b      	cbnz	r3, 800656c <_svfiprintf_r+0x34>
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	f7ff ff3d 	bl	80063d0 <_malloc_r>
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	6120      	str	r0, [r4, #16]
 800655a:	b928      	cbnz	r0, 8006568 <_svfiprintf_r+0x30>
 800655c:	230c      	movs	r3, #12
 800655e:	f8c8 3000 	str.w	r3, [r8]
 8006562:	f04f 30ff 	mov.w	r0, #4294967295
 8006566:	e0c8      	b.n	80066fa <_svfiprintf_r+0x1c2>
 8006568:	2340      	movs	r3, #64	; 0x40
 800656a:	6163      	str	r3, [r4, #20]
 800656c:	2300      	movs	r3, #0
 800656e:	9309      	str	r3, [sp, #36]	; 0x24
 8006570:	2320      	movs	r3, #32
 8006572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006576:	2330      	movs	r3, #48	; 0x30
 8006578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800657c:	9503      	str	r5, [sp, #12]
 800657e:	f04f 0b01 	mov.w	fp, #1
 8006582:	4637      	mov	r7, r6
 8006584:	463d      	mov	r5, r7
 8006586:	f815 3b01 	ldrb.w	r3, [r5], #1
 800658a:	b10b      	cbz	r3, 8006590 <_svfiprintf_r+0x58>
 800658c:	2b25      	cmp	r3, #37	; 0x25
 800658e:	d13e      	bne.n	800660e <_svfiprintf_r+0xd6>
 8006590:	ebb7 0a06 	subs.w	sl, r7, r6
 8006594:	d00b      	beq.n	80065ae <_svfiprintf_r+0x76>
 8006596:	4653      	mov	r3, sl
 8006598:	4632      	mov	r2, r6
 800659a:	4621      	mov	r1, r4
 800659c:	4640      	mov	r0, r8
 800659e:	f7ff ff71 	bl	8006484 <__ssputs_r>
 80065a2:	3001      	adds	r0, #1
 80065a4:	f000 80a4 	beq.w	80066f0 <_svfiprintf_r+0x1b8>
 80065a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065aa:	4453      	add	r3, sl
 80065ac:	9309      	str	r3, [sp, #36]	; 0x24
 80065ae:	783b      	ldrb	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 809d 	beq.w	80066f0 <_svfiprintf_r+0x1b8>
 80065b6:	2300      	movs	r3, #0
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295
 80065bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	9307      	str	r3, [sp, #28]
 80065c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065c8:	931a      	str	r3, [sp, #104]	; 0x68
 80065ca:	462f      	mov	r7, r5
 80065cc:	2205      	movs	r2, #5
 80065ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065d2:	4850      	ldr	r0, [pc, #320]	; (8006714 <_svfiprintf_r+0x1dc>)
 80065d4:	f7f9 fe0c 	bl	80001f0 <memchr>
 80065d8:	9b04      	ldr	r3, [sp, #16]
 80065da:	b9d0      	cbnz	r0, 8006612 <_svfiprintf_r+0xda>
 80065dc:	06d9      	lsls	r1, r3, #27
 80065de:	bf44      	itt	mi
 80065e0:	2220      	movmi	r2, #32
 80065e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065e6:	071a      	lsls	r2, r3, #28
 80065e8:	bf44      	itt	mi
 80065ea:	222b      	movmi	r2, #43	; 0x2b
 80065ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065f0:	782a      	ldrb	r2, [r5, #0]
 80065f2:	2a2a      	cmp	r2, #42	; 0x2a
 80065f4:	d015      	beq.n	8006622 <_svfiprintf_r+0xea>
 80065f6:	9a07      	ldr	r2, [sp, #28]
 80065f8:	462f      	mov	r7, r5
 80065fa:	2000      	movs	r0, #0
 80065fc:	250a      	movs	r5, #10
 80065fe:	4639      	mov	r1, r7
 8006600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006604:	3b30      	subs	r3, #48	; 0x30
 8006606:	2b09      	cmp	r3, #9
 8006608:	d94d      	bls.n	80066a6 <_svfiprintf_r+0x16e>
 800660a:	b1b8      	cbz	r0, 800663c <_svfiprintf_r+0x104>
 800660c:	e00f      	b.n	800662e <_svfiprintf_r+0xf6>
 800660e:	462f      	mov	r7, r5
 8006610:	e7b8      	b.n	8006584 <_svfiprintf_r+0x4c>
 8006612:	4a40      	ldr	r2, [pc, #256]	; (8006714 <_svfiprintf_r+0x1dc>)
 8006614:	1a80      	subs	r0, r0, r2
 8006616:	fa0b f000 	lsl.w	r0, fp, r0
 800661a:	4318      	orrs	r0, r3
 800661c:	9004      	str	r0, [sp, #16]
 800661e:	463d      	mov	r5, r7
 8006620:	e7d3      	b.n	80065ca <_svfiprintf_r+0x92>
 8006622:	9a03      	ldr	r2, [sp, #12]
 8006624:	1d11      	adds	r1, r2, #4
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	9103      	str	r1, [sp, #12]
 800662a:	2a00      	cmp	r2, #0
 800662c:	db01      	blt.n	8006632 <_svfiprintf_r+0xfa>
 800662e:	9207      	str	r2, [sp, #28]
 8006630:	e004      	b.n	800663c <_svfiprintf_r+0x104>
 8006632:	4252      	negs	r2, r2
 8006634:	f043 0302 	orr.w	r3, r3, #2
 8006638:	9207      	str	r2, [sp, #28]
 800663a:	9304      	str	r3, [sp, #16]
 800663c:	783b      	ldrb	r3, [r7, #0]
 800663e:	2b2e      	cmp	r3, #46	; 0x2e
 8006640:	d10c      	bne.n	800665c <_svfiprintf_r+0x124>
 8006642:	787b      	ldrb	r3, [r7, #1]
 8006644:	2b2a      	cmp	r3, #42	; 0x2a
 8006646:	d133      	bne.n	80066b0 <_svfiprintf_r+0x178>
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	9203      	str	r2, [sp, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	bfb8      	it	lt
 8006654:	f04f 33ff 	movlt.w	r3, #4294967295
 8006658:	3702      	adds	r7, #2
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	4d2e      	ldr	r5, [pc, #184]	; (8006718 <_svfiprintf_r+0x1e0>)
 800665e:	7839      	ldrb	r1, [r7, #0]
 8006660:	2203      	movs	r2, #3
 8006662:	4628      	mov	r0, r5
 8006664:	f7f9 fdc4 	bl	80001f0 <memchr>
 8006668:	b138      	cbz	r0, 800667a <_svfiprintf_r+0x142>
 800666a:	2340      	movs	r3, #64	; 0x40
 800666c:	1b40      	subs	r0, r0, r5
 800666e:	fa03 f000 	lsl.w	r0, r3, r0
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	4303      	orrs	r3, r0
 8006676:	3701      	adds	r7, #1
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	7839      	ldrb	r1, [r7, #0]
 800667c:	4827      	ldr	r0, [pc, #156]	; (800671c <_svfiprintf_r+0x1e4>)
 800667e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006682:	2206      	movs	r2, #6
 8006684:	1c7e      	adds	r6, r7, #1
 8006686:	f7f9 fdb3 	bl	80001f0 <memchr>
 800668a:	2800      	cmp	r0, #0
 800668c:	d038      	beq.n	8006700 <_svfiprintf_r+0x1c8>
 800668e:	4b24      	ldr	r3, [pc, #144]	; (8006720 <_svfiprintf_r+0x1e8>)
 8006690:	bb13      	cbnz	r3, 80066d8 <_svfiprintf_r+0x1a0>
 8006692:	9b03      	ldr	r3, [sp, #12]
 8006694:	3307      	adds	r3, #7
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	3308      	adds	r3, #8
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a0:	444b      	add	r3, r9
 80066a2:	9309      	str	r3, [sp, #36]	; 0x24
 80066a4:	e76d      	b.n	8006582 <_svfiprintf_r+0x4a>
 80066a6:	fb05 3202 	mla	r2, r5, r2, r3
 80066aa:	2001      	movs	r0, #1
 80066ac:	460f      	mov	r7, r1
 80066ae:	e7a6      	b.n	80065fe <_svfiprintf_r+0xc6>
 80066b0:	2300      	movs	r3, #0
 80066b2:	3701      	adds	r7, #1
 80066b4:	9305      	str	r3, [sp, #20]
 80066b6:	4619      	mov	r1, r3
 80066b8:	250a      	movs	r5, #10
 80066ba:	4638      	mov	r0, r7
 80066bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c0:	3a30      	subs	r2, #48	; 0x30
 80066c2:	2a09      	cmp	r2, #9
 80066c4:	d903      	bls.n	80066ce <_svfiprintf_r+0x196>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0c8      	beq.n	800665c <_svfiprintf_r+0x124>
 80066ca:	9105      	str	r1, [sp, #20]
 80066cc:	e7c6      	b.n	800665c <_svfiprintf_r+0x124>
 80066ce:	fb05 2101 	mla	r1, r5, r1, r2
 80066d2:	2301      	movs	r3, #1
 80066d4:	4607      	mov	r7, r0
 80066d6:	e7f0      	b.n	80066ba <_svfiprintf_r+0x182>
 80066d8:	ab03      	add	r3, sp, #12
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	4622      	mov	r2, r4
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <_svfiprintf_r+0x1ec>)
 80066e0:	a904      	add	r1, sp, #16
 80066e2:	4640      	mov	r0, r8
 80066e4:	f7fe f8dc 	bl	80048a0 <_printf_float>
 80066e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066ec:	4681      	mov	r9, r0
 80066ee:	d1d6      	bne.n	800669e <_svfiprintf_r+0x166>
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	065b      	lsls	r3, r3, #25
 80066f4:	f53f af35 	bmi.w	8006562 <_svfiprintf_r+0x2a>
 80066f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066fa:	b01d      	add	sp, #116	; 0x74
 80066fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4622      	mov	r2, r4
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <_svfiprintf_r+0x1ec>)
 8006708:	a904      	add	r1, sp, #16
 800670a:	4640      	mov	r0, r8
 800670c:	f7fe fb7e 	bl	8004e0c <_printf_i>
 8006710:	e7ea      	b.n	80066e8 <_svfiprintf_r+0x1b0>
 8006712:	bf00      	nop
 8006714:	080069bc 	.word	0x080069bc
 8006718:	080069c2 	.word	0x080069c2
 800671c:	080069c6 	.word	0x080069c6
 8006720:	080048a1 	.word	0x080048a1
 8006724:	08006485 	.word	0x08006485

08006728 <_sbrk_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4c06      	ldr	r4, [pc, #24]	; (8006744 <_sbrk_r+0x1c>)
 800672c:	2300      	movs	r3, #0
 800672e:	4605      	mov	r5, r0
 8006730:	4608      	mov	r0, r1
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	f7fb f82e 	bl	8001794 <_sbrk>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_sbrk_r+0x1a>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	b103      	cbz	r3, 8006742 <_sbrk_r+0x1a>
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	2000033c 	.word	0x2000033c

08006748 <__ascii_mbtowc>:
 8006748:	b082      	sub	sp, #8
 800674a:	b901      	cbnz	r1, 800674e <__ascii_mbtowc+0x6>
 800674c:	a901      	add	r1, sp, #4
 800674e:	b142      	cbz	r2, 8006762 <__ascii_mbtowc+0x1a>
 8006750:	b14b      	cbz	r3, 8006766 <__ascii_mbtowc+0x1e>
 8006752:	7813      	ldrb	r3, [r2, #0]
 8006754:	600b      	str	r3, [r1, #0]
 8006756:	7812      	ldrb	r2, [r2, #0]
 8006758:	1c10      	adds	r0, r2, #0
 800675a:	bf18      	it	ne
 800675c:	2001      	movne	r0, #1
 800675e:	b002      	add	sp, #8
 8006760:	4770      	bx	lr
 8006762:	4610      	mov	r0, r2
 8006764:	e7fb      	b.n	800675e <__ascii_mbtowc+0x16>
 8006766:	f06f 0001 	mvn.w	r0, #1
 800676a:	e7f8      	b.n	800675e <__ascii_mbtowc+0x16>

0800676c <memmove>:
 800676c:	4288      	cmp	r0, r1
 800676e:	b510      	push	{r4, lr}
 8006770:	eb01 0302 	add.w	r3, r1, r2
 8006774:	d807      	bhi.n	8006786 <memmove+0x1a>
 8006776:	1e42      	subs	r2, r0, #1
 8006778:	4299      	cmp	r1, r3
 800677a:	d00a      	beq.n	8006792 <memmove+0x26>
 800677c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006780:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006784:	e7f8      	b.n	8006778 <memmove+0xc>
 8006786:	4283      	cmp	r3, r0
 8006788:	d9f5      	bls.n	8006776 <memmove+0xa>
 800678a:	1881      	adds	r1, r0, r2
 800678c:	1ad2      	subs	r2, r2, r3
 800678e:	42d3      	cmn	r3, r2
 8006790:	d100      	bne.n	8006794 <memmove+0x28>
 8006792:	bd10      	pop	{r4, pc}
 8006794:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006798:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800679c:	e7f7      	b.n	800678e <memmove+0x22>

0800679e <__malloc_lock>:
 800679e:	4770      	bx	lr

080067a0 <__malloc_unlock>:
 80067a0:	4770      	bx	lr

080067a2 <_realloc_r>:
 80067a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a4:	4607      	mov	r7, r0
 80067a6:	4614      	mov	r4, r2
 80067a8:	460e      	mov	r6, r1
 80067aa:	b921      	cbnz	r1, 80067b6 <_realloc_r+0x14>
 80067ac:	4611      	mov	r1, r2
 80067ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067b2:	f7ff be0d 	b.w	80063d0 <_malloc_r>
 80067b6:	b922      	cbnz	r2, 80067c2 <_realloc_r+0x20>
 80067b8:	f7ff fdbc 	bl	8006334 <_free_r>
 80067bc:	4625      	mov	r5, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c2:	f000 f821 	bl	8006808 <_malloc_usable_size_r>
 80067c6:	42a0      	cmp	r0, r4
 80067c8:	d20f      	bcs.n	80067ea <_realloc_r+0x48>
 80067ca:	4621      	mov	r1, r4
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff fdff 	bl	80063d0 <_malloc_r>
 80067d2:	4605      	mov	r5, r0
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d0f2      	beq.n	80067be <_realloc_r+0x1c>
 80067d8:	4631      	mov	r1, r6
 80067da:	4622      	mov	r2, r4
 80067dc:	f7ff fab6 	bl	8005d4c <memcpy>
 80067e0:	4631      	mov	r1, r6
 80067e2:	4638      	mov	r0, r7
 80067e4:	f7ff fda6 	bl	8006334 <_free_r>
 80067e8:	e7e9      	b.n	80067be <_realloc_r+0x1c>
 80067ea:	4635      	mov	r5, r6
 80067ec:	e7e7      	b.n	80067be <_realloc_r+0x1c>

080067ee <__ascii_wctomb>:
 80067ee:	b149      	cbz	r1, 8006804 <__ascii_wctomb+0x16>
 80067f0:	2aff      	cmp	r2, #255	; 0xff
 80067f2:	bf85      	ittet	hi
 80067f4:	238a      	movhi	r3, #138	; 0x8a
 80067f6:	6003      	strhi	r3, [r0, #0]
 80067f8:	700a      	strbls	r2, [r1, #0]
 80067fa:	f04f 30ff 	movhi.w	r0, #4294967295
 80067fe:	bf98      	it	ls
 8006800:	2001      	movls	r0, #1
 8006802:	4770      	bx	lr
 8006804:	4608      	mov	r0, r1
 8006806:	4770      	bx	lr

08006808 <_malloc_usable_size_r>:
 8006808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800680c:	1f18      	subs	r0, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	bfbc      	itt	lt
 8006812:	580b      	ldrlt	r3, [r1, r0]
 8006814:	18c0      	addlt	r0, r0, r3
 8006816:	4770      	bx	lr

08006818 <_init>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr

08006824 <_fini>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr
